{"openapi": "3.1.0", "info": {"title": "REST API", "description": "The REST API enables running tasks, services, and managing runs programmatically.", "version": "0.15.0"}, "servers": [{"url": "http://localhost:3000", "description": "Local server"}, {"url": "https://cloud.dstack.ai", "description": "Managed server"}], "paths": {"/api/users/list": {"post": {"tags": ["users"], "summary": "List Users", "operationId": "list_users_api_users_list_post", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/User"}, "type": "array", "title": "Response List Users Api Users List Post"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/users/get_my_user": {"post": {"tags": ["users"], "summary": "Get My User", "operationId": "get_my_user_api_users_get_my_user_post", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/users/get_user": {"post": {"tags": ["users"], "summary": "Get User", "operationId": "get_user_api_users_get_user_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/GetUserRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserWithCreds"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/users/create": {"post": {"tags": ["users"], "summary": "Create User", "operationId": "create_user_api_users_create_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CreateUserRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/users/update": {"post": {"tags": ["users"], "summary": "Update User", "operationId": "update_user_api_users_update_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CreateUserRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/users/refresh_token": {"post": {"tags": ["users"], "summary": "Refresh Token", "operationId": "refresh_token_api_users_refresh_token_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RefreshTokenRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserWithCreds"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/users/delete": {"post": {"tags": ["users"], "summary": "Delete Users", "operationId": "delete_users_api_users_delete_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeleteUsersRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/projects/list": {"post": {"tags": ["projects"], "summary": "List Projects", "operationId": "list_projects_api_projects_list_post", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/Project"}, "type": "array", "title": "Response List Projects Api Projects List Post"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/projects/create": {"post": {"tags": ["projects"], "summary": "Create Project", "operationId": "create_project_api_projects_create_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CreateProjectRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Project"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/projects/delete": {"post": {"tags": ["projects"], "summary": "Delete Projects", "operationId": "delete_projects_api_projects_delete_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeleteProjectsRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/projects/{project_name}/get": {"post": {"tags": ["projects"], "summary": "Get Project", "operationId": "get_project_api_projects__project_name__get_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Project"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/projects/{project_name}/set_members": {"post": {"tags": ["projects"], "summary": "Set Project Members", "operationId": "set_project_members_api_projects__project_name__set_members_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SetProjectMembersRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Project"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/backends/list_types": {"post": {"tags": ["backends"], "summary": "List Backend Types", "operationId": "list_backend_types_api_backends_list_types_post", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/BackendType"}, "type": "array"}}}}}}}, "/api/backends/config_values": {"post": {"tags": ["backends"], "summary": "Get Backend Config Values", "operationId": "get_backend_config_values_api_backends_config_values_post", "requestBody": {"content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/AWSConfigInfoWithCredsPartial"}, {"$ref": "#/components/schemas/AzureConfigInfoWithCredsPartial"}, {"$ref": "#/components/schemas/DataCrunchConfigInfoWithCredsPartial"}, {"$ref": "#/components/schemas/GCPConfigInfoWithCredsPartial"}, {"$ref": "#/components/schemas/KubernetesConfigInfoWithCredsPartial"}, {"$ref": "#/components/schemas/LambdaConfigInfoWithCredsPartial"}, {"$ref": "#/components/schemas/NebiusConfigInfoWithCredsPartial"}, {"$ref": "#/components/schemas/TensorDockConfigInfoWithCredsPartial"}, {"$ref": "#/components/schemas/VastAIConfigInfoWithCredsPartial"}, {"$ref": "#/components/schemas/DstackConfigInfo"}], "title": "Body"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/AWSConfigValues"}, {"$ref": "#/components/schemas/AzureConfigValues"}, {"$ref": "#/components/schemas/DataCrunchConfigValues"}, {"$ref": "#/components/schemas/GCPConfigValues"}, {"$ref": "#/components/schemas/KubernetesConfigValues"}, {"$ref": "#/components/schemas/LambdaConfigValues"}, {"$ref": "#/components/schemas/NebiusConfigValues"}, {"$ref": "#/components/schemas/TensorDockConfigValues"}, {"$ref": "#/components/schemas/VastAIConfigValues"}, {"$ref": "#/components/schemas/DstackConfigValues"}], "title": "Response Get Backend Config Values Api Backends Config Values Post"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/backends/create": {"post": {"tags": ["backends"], "summary": "Create Backend", "operationId": "create_backend_api_project__project_name__backends_create_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/AWSConfigInfoWithCreds"}, {"$ref": "#/components/schemas/AzureConfigInfoWithCreds"}, {"$ref": "#/components/schemas/DataCrunchConfigInfoWithCreds"}, {"$ref": "#/components/schemas/GCPConfigInfoWithCreds"}, {"$ref": "#/components/schemas/KubernetesConfigInfoWithCreds"}, {"$ref": "#/components/schemas/LambdaConfigInfoWithCreds"}, {"$ref": "#/components/schemas/NebiusConfigInfoWithCreds"}, {"$ref": "#/components/schemas/TensorDockConfigInfoWithCreds"}, {"$ref": "#/components/schemas/VastAIConfigInfoWithCreds"}, {"$ref": "#/components/schemas/DstackConfigInfo"}], "title": "Body"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/AWSConfigInfoWithCreds"}, {"$ref": "#/components/schemas/AzureConfigInfoWithCreds"}, {"$ref": "#/components/schemas/DataCrunchConfigInfoWithCreds"}, {"$ref": "#/components/schemas/GCPConfigInfoWithCreds"}, {"$ref": "#/components/schemas/KubernetesConfigInfoWithCreds"}, {"$ref": "#/components/schemas/LambdaConfigInfoWithCreds"}, {"$ref": "#/components/schemas/NebiusConfigInfoWithCreds"}, {"$ref": "#/components/schemas/TensorDockConfigInfoWithCreds"}, {"$ref": "#/components/schemas/VastAIConfigInfoWithCreds"}, {"$ref": "#/components/schemas/DstackConfigInfo"}], "title": "Response Create Backend Api Project  Project Name  Backends Create Post"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/backends/update": {"post": {"tags": ["backends"], "summary": "Update Backend", "operationId": "update_backend_api_project__project_name__backends_update_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/AWSConfigInfoWithCreds"}, {"$ref": "#/components/schemas/AzureConfigInfoWithCreds"}, {"$ref": "#/components/schemas/DataCrunchConfigInfoWithCreds"}, {"$ref": "#/components/schemas/GCPConfigInfoWithCreds"}, {"$ref": "#/components/schemas/KubernetesConfigInfoWithCreds"}, {"$ref": "#/components/schemas/LambdaConfigInfoWithCreds"}, {"$ref": "#/components/schemas/NebiusConfigInfoWithCreds"}, {"$ref": "#/components/schemas/TensorDockConfigInfoWithCreds"}, {"$ref": "#/components/schemas/VastAIConfigInfoWithCreds"}, {"$ref": "#/components/schemas/DstackConfigInfo"}], "title": "Body"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/AWSConfigInfoWithCreds"}, {"$ref": "#/components/schemas/AzureConfigInfoWithCreds"}, {"$ref": "#/components/schemas/DataCrunchConfigInfoWithCreds"}, {"$ref": "#/components/schemas/GCPConfigInfoWithCreds"}, {"$ref": "#/components/schemas/KubernetesConfigInfoWithCreds"}, {"$ref": "#/components/schemas/LambdaConfigInfoWithCreds"}, {"$ref": "#/components/schemas/NebiusConfigInfoWithCreds"}, {"$ref": "#/components/schemas/TensorDockConfigInfoWithCreds"}, {"$ref": "#/components/schemas/VastAIConfigInfoWithCreds"}, {"$ref": "#/components/schemas/DstackConfigInfo"}], "title": "Response Update Backend Api Project  Project Name  Backends Update Post"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/backends/delete": {"post": {"tags": ["backends"], "summary": "Delete Backends", "operationId": "delete_backends_api_project__project_name__backends_delete_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeleteBackendsRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/backends/{backend_name}/config_info": {"post": {"tags": ["backends"], "summary": "Get Backend Config Info", "operationId": "get_backend_config_info_api_project__project_name__backends__backend_name__config_info_post", "parameters": [{"required": true, "schema": {"$ref": "#/components/schemas/BackendType"}, "name": "backend_name", "in": "path"}, {"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/AWSConfigInfoWithCreds"}, {"$ref": "#/components/schemas/AzureConfigInfoWithCreds"}, {"$ref": "#/components/schemas/DataCrunchConfigInfoWithCreds"}, {"$ref": "#/components/schemas/GCPConfigInfoWithCreds"}, {"$ref": "#/components/schemas/KubernetesConfigInfoWithCreds"}, {"$ref": "#/components/schemas/LambdaConfigInfoWithCreds"}, {"$ref": "#/components/schemas/NebiusConfigInfoWithCreds"}, {"$ref": "#/components/schemas/TensorDockConfigInfoWithCreds"}, {"$ref": "#/components/schemas/VastAIConfigInfoWithCreds"}, {"$ref": "#/components/schemas/DstackConfigInfo"}], "title": "Response Get Backend Config Info Api Project  Project Name  Backends  Backend Name  Config Info Post"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/repos/list": {"post": {"tags": ["repos"], "summary": "List Repos", "operationId": "list_repos_api_project__project_name__repos_list_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/RepoHead"}, "type": "array", "title": "Response List Repos Api Project  Project Name  Repos List Post"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/repos/get": {"post": {"tags": ["repos"], "summary": "Get Repo", "operationId": "get_repo_api_project__project_name__repos_get_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/GetRepoRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RepoHeadWithCreds"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/repos/init": {"post": {"tags": ["repos"], "summary": "Init Repo", "operationId": "init_repo_api_project__project_name__repos_init_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SaveRepoCredsRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/repos/delete": {"post": {"tags": ["repos"], "summary": "Delete Repos", "operationId": "delete_repos_api_project__project_name__repos_delete_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeleteReposRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/repos/upload_code": {"post": {"tags": ["repos"], "summary": "Upload Code", "operationId": "upload_code_api_project__project_name__repos_upload_code_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}, {"required": true, "schema": {"type": "string", "title": "Repo Id"}, "name": "repo_id", "in": "query"}], "requestBody": {"content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/Body_upload_code_api_project__project_name__repos_upload_code_post"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/runs/list": {"post": {"tags": ["runs"], "summary": "List Runs", "operationId": "list_runs_api_runs_list_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ListRunsRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/Run"}, "type": "array", "title": "Response List Runs Api Runs List Post"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/runs/get": {"post": {"tags": ["runs"], "summary": "Get Run", "operationId": "get_run_api_project__project_name__runs_get_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/GetRunRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Run"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/runs/get_plan": {"post": {"tags": ["runs"], "summary": "Get Run Plan", "operationId": "get_run_plan_api_project__project_name__runs_get_plan_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SubmitRunRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RunPlan"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/runs/submit": {"post": {"tags": ["runs"], "summary": "Submit Run", "operationId": "submit_run_api_project__project_name__runs_submit_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SubmitRunRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Run"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/runs/stop": {"post": {"tags": ["runs"], "summary": "Stop Runs", "operationId": "stop_runs_api_project__project_name__runs_stop_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/StopRunsRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/runs/delete": {"post": {"tags": ["runs"], "summary": "Delete Runs", "operationId": "delete_runs_api_project__project_name__runs_delete_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeleteRunsRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/logs/poll": {"post": {"tags": ["logs"], "summary": "Poll Logs", "operationId": "poll_logs_api_project__project_name__logs_poll_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PollLogsRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/JobSubmissionLogs"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/secrets/list": {"post": {"tags": ["secrets"], "summary": "List Secrets", "operationId": "list_secrets_api_project__project_name__secrets_list_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ListSecretsRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/Run"}, "type": "array", "title": "Response List Secrets Api Project  Project Name  Secrets List Post"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/project/{project_name}/secrets/get": {"post": {"tags": ["secrets"], "summary": "Get Secret", "operationId": "get_secret_api_project__project_name__secrets_get_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/GetSecretsRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Secret"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/project/{project_name}/secrets/add": {"post": {"tags": ["secrets"], "summary": "Add Or Update Secret", "operationId": "add_or_update_secret_api_project__project_name__secrets_add_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AddSecretRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Secret"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/project/{project_name}/secrets/delete": {"post": {"tags": ["secrets"], "summary": "Delete Secrets", "operationId": "delete_secrets_api_project__project_name__secrets_delete_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeleteSecretsRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/project/{project_name}/gateways/list": {"post": {"tags": ["gateways"], "summary": "List Gateways", "operationId": "list_gateways_api_project__project_name__gateways_list_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/dstack___internal__core__models__gateways__Gateway"}, "type": "array", "title": "Response List Gateways Api Project  Project Name  Gateways List Post"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/gateways/get": {"post": {"tags": ["gateways"], "summary": "Get Gateway", "operationId": "get_gateway_api_project__project_name__gateways_get_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/GetGatewayRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/dstack___internal__core__models__gateways__Gateway"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/gateways/create": {"post": {"tags": ["gateways"], "summary": "Create Gateway", "operationId": "create_gateway_api_project__project_name__gateways_create_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CreateGatewayRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/dstack___internal__core__models__gateways__Gateway"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/gateways/delete": {"post": {"tags": ["gateways"], "summary": "Delete Gateways", "operationId": "delete_gateways_api_project__project_name__gateways_delete_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeleteGatewaysRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/gateways/set_default": {"post": {"tags": ["gateways"], "summary": "Set Default Gateway", "operationId": "set_default_gateway_api_project__project_name__gateways_set_default_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SetDefaultGatewayRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/gateways/set_wildcard_domain": {"post": {"tags": ["gateways"], "summary": "Set Gateway Wildcard Domain", "operationId": "set_gateway_wildcard_domain_api_project__project_name__gateways_set_wildcard_domain_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SetWildcardDomainRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/dstack___internal__core__models__gateways__Gateway"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/healthcheck": {"get": {"summary": "Healthcheck", "operationId": "healthcheck_healthcheck_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/": {"get": {"summary": "Index", "operationId": "index__get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}}, "components": {"schemas": {"AWSAccessKeyCreds": {"properties": {"type": {"type": "string", "enum": ["access_key"], "title": "Type", "default": "access_key"}, "access_key": {"type": "string", "title": "Access Key"}, "secret_key": {"type": "string", "title": "Secret Key"}}, "additionalProperties": false, "type": "object", "required": ["access_key", "secret_key"], "title": "AWSAccessKeyCreds"}, "AWSConfigInfo": {"properties": {"type": {"type": "string", "enum": ["aws"], "title": "Type", "default": "aws"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}}, "type": "object", "title": "AWSConfigInfo"}, "AWSConfigInfoWithCreds": {"properties": {"type": {"type": "string", "enum": ["aws"], "title": "Type", "default": "aws"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}, "creds": {"anyOf": [{"$ref": "#/components/schemas/AWSAccessKeyCreds"}, {"$ref": "#/components/schemas/AWSDefaultCreds"}], "title": "Creds"}}, "type": "object", "required": ["creds"], "title": "AWSConfigInfoWithCreds"}, "AWSConfigInfoWithCredsPartial": {"properties": {"type": {"type": "string", "enum": ["aws"], "title": "Type", "default": "aws"}, "creds": {"anyOf": [{"$ref": "#/components/schemas/AWSAccessKeyCreds"}, {"$ref": "#/components/schemas/AWSDefaultCreds"}], "title": "Creds"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}}, "type": "object", "title": "AWSConfigInfoWithCredsPartial"}, "AWSConfigValues": {"properties": {"type": {"type": "string", "enum": ["aws"], "title": "Type", "default": "aws"}, "default_creds": {"type": "boolean", "title": "Default Creds", "default": false}, "regions": {"$ref": "#/components/schemas/ConfigMultiElement"}}, "type": "object", "title": "AWSConfigValues"}, "AWSDefaultCreds": {"properties": {"type": {"type": "string", "enum": ["default"], "title": "Type", "default": "default"}}, "additionalProperties": false, "type": "object", "title": "AWSDefaultCreds"}, "AddSecretRequest": {"properties": {"repo_id": {"type": "string", "title": "Repo Id"}, "secret": {"$ref": "#/components/schemas/Secret"}}, "type": "object", "required": ["repo_id", "secret"], "title": "AddSecretRequest"}, "AppSpec": {"properties": {"port": {"type": "integer", "title": "Port"}, "map_to_port": {"type": "integer", "title": "Map To Port"}, "app_name": {"type": "string", "title": "App Name"}, "url_path": {"type": "string", "title": "Url Path"}, "url_query_params": {"additionalProperties": {"type": "string"}, "type": "object", "title": "Url Query Params"}}, "type": "object", "required": ["port", "app_name"], "title": "AppSpec"}, "AzureClientCreds": {"properties": {"type": {"type": "string", "enum": ["client"], "title": "Type", "default": "client"}, "client_id": {"type": "string", "title": "Client Id"}, "client_secret": {"type": "string", "title": "Client Secret"}, "tenant_id": {"type": "string", "title": "Tenant Id"}}, "additionalProperties": false, "type": "object", "required": ["client_id", "client_secret"], "title": "AzureClientCreds"}, "AzureConfigInfo": {"properties": {"type": {"type": "string", "enum": ["azure"], "title": "Type", "default": "azure"}, "tenant_id": {"type": "string", "title": "Tenant Id"}, "subscription_id": {"type": "string", "title": "Subscription Id"}, "locations": {"items": {"type": "string"}, "type": "array", "title": "Locations"}}, "type": "object", "required": ["tenant_id", "subscription_id"], "title": "AzureConfigInfo"}, "AzureConfigInfoWithCreds": {"properties": {"type": {"type": "string", "enum": ["azure"], "title": "Type", "default": "azure"}, "tenant_id": {"type": "string", "title": "Tenant Id"}, "subscription_id": {"type": "string", "title": "Subscription Id"}, "locations": {"items": {"type": "string"}, "type": "array", "title": "Locations"}, "creds": {"anyOf": [{"$ref": "#/components/schemas/AzureClientCreds"}, {"$ref": "#/components/schemas/AzureDefaultCreds"}], "title": "Creds"}}, "type": "object", "required": ["tenant_id", "subscription_id", "creds"], "title": "AzureConfigInfoWithCreds"}, "AzureConfigInfoWithCredsPartial": {"properties": {"type": {"type": "string", "enum": ["azure"], "title": "Type", "default": "azure"}, "creds": {"anyOf": [{"$ref": "#/components/schemas/AzureClientCreds"}, {"$ref": "#/components/schemas/AzureDefaultCreds"}], "title": "Creds"}, "tenant_id": {"type": "string", "title": "Tenant Id"}, "subscription_id": {"type": "string", "title": "Subscription Id"}, "locations": {"items": {"type": "string"}, "type": "array", "title": "Locations"}}, "type": "object", "title": "AzureConfigInfoWithCredsPartial"}, "AzureConfigValues": {"properties": {"type": {"type": "string", "enum": ["azure"], "title": "Type", "default": "azure"}, "default_creds": {"type": "boolean", "title": "Default Creds", "default": false}, "tenant_id": {"$ref": "#/components/schemas/ConfigElement"}, "subscription_id": {"$ref": "#/components/schemas/ConfigElement"}, "locations": {"$ref": "#/components/schemas/ConfigMultiElement"}}, "type": "object", "title": "AzureConfigValues"}, "AzureDefaultCreds": {"properties": {"type": {"type": "string", "enum": ["default"], "title": "Type", "default": "default"}}, "additionalProperties": false, "type": "object", "title": "AzureDefaultCreds"}, "BackendInfo": {"properties": {"name": {"type": "string", "title": "Name"}, "config": {"anyOf": [{"$ref": "#/components/schemas/AWSConfigInfo"}, {"$ref": "#/components/schemas/AzureConfigInfo"}, {"$ref": "#/components/schemas/DataCrunchConfigInfo"}, {"$ref": "#/components/schemas/GCPConfigInfo"}, {"$ref": "#/components/schemas/KubernetesConfigInfo"}, {"$ref": "#/components/schemas/LambdaConfigInfo"}, {"$ref": "#/components/schemas/NebiusConfigInfo"}, {"$ref": "#/components/schemas/TensorDockConfigInfo"}, {"$ref": "#/components/schemas/VastAIConfigInfo"}, {"$ref": "#/components/schemas/DstackConfigInfo"}], "title": "Config"}}, "type": "object", "required": ["name", "config"], "title": "BackendInfo"}, "BackendType": {"type": "string", "enum": ["aws", "azure", "datacrunch", "dstack", "gcp", "kubernetes", "lambda", "local", "nebius", "tensordock", "vastai"], "title": "BackendType", "description": "Attributes:\n    AWS (BackendType): Amazon Web Services\n    AZURE (BackendType): Microsoft Azure\n    DSTACK (BackendType): dstack Cloud\n    GCP (BackendType): Google Cloud Platform\n    DATACRUNCH (BackendType): DataCrunch\n    KUBERNETES (BackendType): Kubernetes\n    LAMBDA (BackendType): Lambda Cloud\n    TENSORDOCK (BackendType): TensorDock Marketplace\n    VASTAI (BackendType): Vast.ai Marketplace"}, "Body_upload_code_api_project__project_name__repos_upload_code_post": {"properties": {"file": {"type": "string", "format": "binary", "title": "File"}}, "type": "object", "required": ["file"], "title": "Body_upload_code_api_project__project_name__repos_upload_code_post"}, "ConfigElement": {"properties": {"selected": {"type": "string", "title": "Selected"}, "values": {"items": {"$ref": "#/components/schemas/ConfigElementValue"}, "type": "array", "title": "Values", "default": []}}, "type": "object", "title": "ConfigElement"}, "ConfigElementValue": {"properties": {"value": {"type": "string", "title": "Value"}, "label": {"type": "string", "title": "Label"}}, "type": "object", "required": ["value", "label"], "title": "ConfigElementValue"}, "ConfigMultiElement": {"properties": {"selected": {"items": {"type": "string"}, "type": "array", "title": "Selected", "default": []}, "values": {"items": {"$ref": "#/components/schemas/ConfigElementValue"}, "type": "array", "title": "Values", "default": []}}, "type": "object", "title": "ConfigMultiElement"}, "CreateGatewayRequest": {"properties": {"name": {"type": "string", "title": "Name"}, "backend_type": {"$ref": "#/components/schemas/BackendType"}, "region": {"type": "string", "title": "Region"}}, "type": "object", "required": ["backend_type", "region"], "title": "CreateGatewayRequest"}, "CreateProjectRequest": {"properties": {"project_name": {"type": "string", "title": "Project Name"}}, "type": "object", "required": ["project_name"], "title": "CreateProjectRequest"}, "CreateUserRequest": {"properties": {"username": {"type": "string", "title": "Username"}, "global_role": {"$ref": "#/components/schemas/GlobalRole"}, "email": {"type": "string", "title": "Email"}}, "type": "object", "required": ["username", "global_role"], "title": "CreateUserRequest"}, "DataCrunchAPIKeyCreds": {"properties": {"type": {"type": "string", "enum": ["api_key"], "title": "Type", "default": "api_key"}, "client_id": {"type": "string", "title": "Client Id"}, "client_secret": {"type": "string", "title": "Client Secret"}}, "additionalProperties": false, "type": "object", "required": ["client_id", "client_secret"], "title": "DataCrunchAPIKeyCreds"}, "DataCrunchConfigInfo": {"properties": {"type": {"type": "string", "enum": ["datacrunch"], "title": "Type", "default": "datacrunch"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}}, "type": "object", "title": "DataCrunchConfigInfo"}, "DataCrunchConfigInfoWithCreds": {"properties": {"type": {"type": "string", "enum": ["datacrunch"], "title": "Type", "default": "datacrunch"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}, "creds": {"$ref": "#/components/schemas/DataCrunchAPIKeyCreds"}}, "type": "object", "required": ["creds"], "title": "DataCrunchConfigInfoWithCreds"}, "DataCrunchConfigInfoWithCredsPartial": {"properties": {"type": {"type": "string", "enum": ["datacrunch"], "title": "Type", "default": "datacrunch"}, "creds": {"$ref": "#/components/schemas/DataCrunchAPIKeyCreds"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}}, "type": "object", "title": "DataCrunchConfigInfoWithCredsPartial"}, "DataCrunchConfigValues": {"properties": {"type": {"type": "string", "enum": ["datacrunch"], "title": "Type", "default": "datacrunch"}, "regions": {"$ref": "#/components/schemas/ConfigMultiElement"}}, "type": "object", "title": "DataCrunchConfigValues"}, "DeleteBackendsRequest": {"properties": {"backends_names": {"items": {"$ref": "#/components/schemas/BackendType"}, "type": "array"}}, "type": "object", "required": ["backends_names"], "title": "DeleteBackendsRequest"}, "DeleteGatewaysRequest": {"properties": {"names": {"items": {"type": "string"}, "type": "array", "title": "Names"}}, "type": "object", "required": ["names"], "title": "DeleteGatewaysRequest"}, "DeleteProjectsRequest": {"properties": {"projects_names": {"items": {"type": "string"}, "type": "array", "title": "Projects Names"}}, "type": "object", "required": ["projects_names"], "title": "DeleteProjectsRequest"}, "DeleteReposRequest": {"properties": {"repos_ids": {"items": {"type": "string"}, "type": "array", "title": "Repos Ids"}}, "type": "object", "required": ["repos_ids"], "title": "DeleteReposRequest"}, "DeleteRunsRequest": {"properties": {"runs_names": {"items": {"type": "string"}, "type": "array", "title": "Runs Names"}}, "type": "object", "required": ["runs_names"], "title": "DeleteRunsRequest"}, "DeleteSecretsRequest": {"properties": {"repo_id": {"type": "string", "title": "Repo Id"}, "secrets_names": {"items": {"type": "string"}, "type": "array", "title": "Secrets Names"}}, "type": "object", "required": ["repo_id", "secrets_names"], "title": "DeleteSecretsRequest"}, "DeleteUsersRequest": {"properties": {"users": {"items": {"type": "string"}, "type": "array", "title": "Users"}}, "type": "object", "required": ["users"], "title": "DeleteUsersRequest"}, "DevEnvironmentConfiguration": {"properties": {"type": {"type": "string", "enum": ["dev-environment"], "title": "Type", "default": "dev-environment"}, "image": {"type": "string", "title": "Image", "description": "The name of the Docker image to run"}, "entrypoint": {"type": "string", "title": "Entrypoint", "description": "The Docker entrypoint"}, "home_dir": {"type": "string", "title": "Home Dir", "description": "The absolute path to the home directory inside the container", "default": "/root"}, "registry_auth": {"allOf": [{"$ref": "#/components/schemas/RegistryAuth"}], "title": "Registry Auth", "description": "Credentials for pulling a private Docker image"}, "python": {"allOf": [{"$ref": "#/components/schemas/PythonVersion"}], "description": "The major version of Python\nMutually exclusive with the image"}, "env": {"anyOf": [{"items": {"type": "string", "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*=.*$"}, "type": "array"}, {"additionalProperties": {"type": "string"}, "type": "object"}], "title": "Env", "description": "The mapping or the list of environment variables", "default": {}}, "setup": {"items": {"type": "string"}, "type": "array", "title": "Setup", "description": "The bash commands to run on the boot", "default": []}, "resources": {"allOf": [{"$ref": "#/components/schemas/ResourcesSpec"}], "title": "Resources", "description": "The resources requirements to run the configuration", "default": {"cpu": {"min": 2}, "memory": {"min": 8.0}}}, "ports": {"items": {"anyOf": [{"type": "integer", "maximum": 65536.0, "exclusiveMinimum": 0.0}, {"type": "string", "pattern": "^(?:[0-9]+|\\*):[0-9]+$"}, {"$ref": "#/components/schemas/PortMapping"}]}, "type": "array", "title": "Ports", "description": "Port numbers/mapping to expose", "default": []}, "ide": {"type": "string", "enum": ["vscode"], "title": "Ide", "description": "The IDE to run"}, "version": {"type": "string", "title": "Version", "description": "The version of the IDE"}, "init": {"items": {"type": "string"}, "type": "array", "title": "Init", "description": "The bash commands to run", "default": []}}, "additionalProperties": false, "type": "object", "required": ["ide"], "title": "DevEnvironmentConfiguration"}, "Disk": {"properties": {"size_mib": {"type": "integer", "title": "Size Mib"}}, "type": "object", "required": ["size_mib"], "title": "Disk"}, "DiskSpec": {"properties": {"size": {"$ref": "#/components/schemas/Range_Memory_"}}, "additionalProperties": false, "type": "object", "required": ["size"], "title": "DiskSpec", "description": "The disk spec\n\nAttributes:\n    size (Range[Memory]): The size of the disk (e.g., `\"100GB\"`)"}, "DstackConfigInfo": {"properties": {"type": {"type": "string", "enum": ["dstack"], "title": "Type", "default": "dstack"}}, "type": "object", "title": "DstackConfigInfo"}, "DstackConfigValues": {"properties": {"type": {"type": "string", "enum": ["dstack"], "title": "Type", "default": "dstack"}}, "type": "object", "title": "DstackConfigValues"}, "GCPConfigInfo": {"properties": {"type": {"type": "string", "enum": ["gcp"], "title": "Type", "default": "gcp"}, "project_id": {"type": "string", "title": "Project Id"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}}, "type": "object", "required": ["project_id"], "title": "GCPConfigInfo"}, "GCPConfigInfoWithCreds": {"properties": {"type": {"type": "string", "enum": ["gcp"], "title": "Type", "default": "gcp"}, "project_id": {"type": "string", "title": "Project Id"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}, "creds": {"anyOf": [{"$ref": "#/components/schemas/GCPServiceAccountCreds"}, {"$ref": "#/components/schemas/GCPDefaultCreds"}], "title": "Creds"}}, "type": "object", "required": ["project_id", "creds"], "title": "GCPConfigInfoWithCreds"}, "GCPConfigInfoWithCredsPartial": {"properties": {"type": {"type": "string", "enum": ["gcp"], "title": "Type", "default": "gcp"}, "creds": {"anyOf": [{"$ref": "#/components/schemas/GCPServiceAccountCreds"}, {"$ref": "#/components/schemas/GCPDefaultCreds"}], "title": "Creds"}, "project_id": {"type": "string", "title": "Project Id"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}}, "type": "object", "title": "GCPConfigInfoWithCredsPartial"}, "GCPConfigValues": {"properties": {"type": {"type": "string", "enum": ["gcp"], "title": "Type", "default": "gcp"}, "default_creds": {"type": "boolean", "title": "Default Creds", "default": false}, "project_id": {"$ref": "#/components/schemas/ConfigElement"}, "regions": {"$ref": "#/components/schemas/ConfigMultiElement"}}, "type": "object", "title": "GCPConfigValues"}, "GCPDefaultCreds": {"properties": {"type": {"type": "string", "enum": ["default"], "title": "Type", "default": "default"}}, "additionalProperties": false, "type": "object", "title": "GCPDefaultCreds"}, "GCPServiceAccountCreds": {"properties": {"type": {"type": "string", "enum": ["service_account"], "title": "Type", "default": "service_account"}, "filename": {"type": "string", "title": "Filename"}, "data": {"type": "string", "title": "Data"}}, "additionalProperties": false, "type": "object", "required": ["filename", "data"], "title": "GCPServiceAccountCreds"}, "GPUSpec": {"properties": {"name": {"items": {"type": "string"}, "type": "array", "title": "Name"}, "count": {"allOf": [{"$ref": "#/components/schemas/Range_int_"}], "title": "Count", "default": {"min": 1, "max": 1}}, "memory": {"$ref": "#/components/schemas/Range_Memory_"}, "total_memory": {"$ref": "#/components/schemas/Range_Memory_"}, "compute_capability": {"items": {}, "type": "array", "title": "Compute Capability"}}, "additionalProperties": false, "type": "object", "title": "GPUSpec", "description": "The GPU spec\n\nAttributes:\n    name (Optional[List[str]]): The name of the GPU (e.g., `\"A100\"` or `\"H100\"`)\n    count (Optional[Range[int]]): The number of GPUs\n    memory (Optional[Range[Memory]]): The size of a single GPU memory (e.g., `\"16GB\"`)\n    total_memory (Optional[Range[Memory]]): The total size of all GPUs memory (e.g., `\"32GB\"`)\n    compute_capability (Optional[float]): The minimum compute capability of the GPU (e.g., `7.5`)"}, "GetGatewayRequest": {"properties": {"name": {"type": "string", "title": "Name"}}, "type": "object", "required": ["name"], "title": "GetGatewayRequest"}, "GetRepoRequest": {"properties": {"repo_id": {"type": "string", "title": "Repo Id"}, "include_creds": {"type": "boolean", "title": "Include Creds"}}, "type": "object", "required": ["repo_id", "include_creds"], "title": "GetRepoRequest"}, "GetRunRequest": {"properties": {"run_name": {"type": "string", "title": "Run Name"}}, "type": "object", "required": ["run_name"], "title": "GetRunRequest"}, "GetSecretsRequest": {"properties": {"repo_id": {"type": "string", "title": "Repo Id"}}, "type": "object", "required": ["repo_id"], "title": "GetSecretsRequest"}, "GetUserRequest": {"properties": {"username": {"type": "string", "title": "Username"}}, "type": "object", "required": ["username"], "title": "GetUserRequest"}, "GlobalRole": {"type": "string", "enum": ["admin", "user"], "title": "GlobalRole", "description": "An enumeration."}, "Gpu": {"properties": {"name": {"type": "string", "title": "Name"}, "memory_mib": {"type": "integer", "title": "Memory Mib"}}, "type": "object", "required": ["name", "memory_mib"], "title": "Gpu"}, "HTTPValidationError": {"properties": {"detail": {"items": {"$ref": "#/components/schemas/ValidationError"}, "type": "array", "title": "Detail"}}, "type": "object", "title": "HTTPValidationError"}, "InstanceAvailability": {"enum": ["unknown", "available", "not_available", "no_quota"], "title": "InstanceAvailability", "description": "An enumeration."}, "InstanceOfferWithAvailability": {"properties": {"backend": {"$ref": "#/components/schemas/BackendType"}, "instance": {"$ref": "#/components/schemas/InstanceType"}, "region": {"type": "string", "title": "Region"}, "price": {"type": "number", "title": "Price"}, "availability": {"$ref": "#/components/schemas/InstanceAvailability"}}, "type": "object", "required": ["backend", "instance", "region", "price", "availability"], "title": "InstanceOfferWithAvailability"}, "InstanceType": {"properties": {"name": {"type": "string", "title": "Name"}, "resources": {"$ref": "#/components/schemas/Resources"}}, "type": "object", "required": ["name", "resources"], "title": "InstanceType"}, "Job": {"properties": {"job_spec": {"$ref": "#/components/schemas/JobSpec"}, "job_submissions": {"items": {"$ref": "#/components/schemas/JobSubmission"}, "type": "array", "title": "Job Submissions"}}, "type": "object", "required": ["job_spec", "job_submissions"], "title": "Job"}, "JobErrorCode": {"type": "string", "enum": ["failed_to_start_due_to_no_capacity", "interrupted_by_no_capacity", "waiting_runner_limit_exceeded", "terminated_by_user", "gateway_error", "container_exited_with_error", "ports_binding_failed"], "title": "JobErrorCode", "description": "An enumeration."}, "JobPlan": {"properties": {"job_spec": {"$ref": "#/components/schemas/JobSpec"}, "offers": {"items": {"$ref": "#/components/schemas/InstanceOfferWithAvailability"}, "type": "array", "title": "Offers"}}, "type": "object", "required": ["job_spec", "offers"], "title": "JobPlan"}, "JobProvisioningData": {"properties": {"backend": {"$ref": "#/components/schemas/BackendType"}, "instance_type": {"$ref": "#/components/schemas/InstanceType"}, "instance_id": {"type": "string", "title": "Instance Id"}, "hostname": {"type": "string", "title": "Hostname"}, "region": {"type": "string", "title": "Region"}, "price": {"type": "number", "title": "Price"}, "username": {"type": "string", "title": "Username"}, "ssh_port": {"type": "integer", "title": "Ssh Port"}, "dockerized": {"type": "boolean", "title": "Dockerized"}, "ssh_proxy": {"$ref": "#/components/schemas/SSHConnectionParams"}, "backend_data": {"type": "string", "title": "Backend Data"}}, "type": "object", "required": ["backend", "instance_type", "instance_id", "hostname", "region", "price", "username", "ssh_port", "dockerized"], "title": "JobProvisioningData"}, "JobSpec": {"properties": {"job_num": {"type": "integer", "title": "Job Num"}, "job_name": {"type": "string", "title": "Job Name"}, "app_specs": {"items": {"$ref": "#/components/schemas/AppSpec"}, "type": "array", "title": "App Specs"}, "commands": {"items": {"type": "string"}, "type": "array", "title": "Commands"}, "env": {"additionalProperties": {"type": "string"}, "type": "object", "title": "Env"}, "gateway": {"$ref": "#/components/schemas/dstack___internal__core__models__runs__Gateway"}, "home_dir": {"type": "string", "title": "Home Dir"}, "image_name": {"type": "string", "title": "Image Name"}, "max_duration": {"type": "integer", "title": "Max Duration"}, "registry_auth": {"$ref": "#/components/schemas/RegistryAuth"}, "requirements": {"$ref": "#/components/schemas/Requirements"}, "retry_policy": {"$ref": "#/components/schemas/RetryPolicy"}, "working_dir": {"type": "string", "title": "Working Dir"}}, "type": "object", "required": ["job_num", "job_name", "commands", "env", "image_name", "requirements", "retry_policy", "working_dir"], "title": "JobSpec"}, "JobStatus": {"type": "string", "enum": ["pending", "submitted", "provisioning", "pulling", "running", "terminating", "terminated", "aborted", "failed", "done"], "title": "JobStatus", "description": "An enumeration."}, "JobSubmission": {"properties": {"id": {"type": "string", "format": "uuid4", "title": "Id"}, "submission_num": {"type": "integer", "title": "Submission Num"}, "submitted_at": {"type": "string", "format": "date-time", "title": "Submitted At"}, "finished_at": {"type": "string", "format": "date-time", "title": "Finished At"}, "status": {"$ref": "#/components/schemas/JobStatus"}, "error_code": {"$ref": "#/components/schemas/JobErrorCode"}, "job_provisioning_data": {"$ref": "#/components/schemas/JobProvisioningData"}}, "type": "object", "required": ["id", "submission_num", "submitted_at", "status"], "title": "JobSubmission"}, "JobSubmissionLogs": {"properties": {"logs": {"items": {"$ref": "#/components/schemas/LogEvent"}, "type": "array", "title": "Logs"}}, "type": "object", "required": ["logs"], "title": "JobSubmissionLogs"}, "KubeconfigConfig": {"properties": {"filename": {"type": "string", "title": "Filename"}, "data": {"type": "string", "title": "Data"}}, "additionalProperties": false, "type": "object", "required": ["filename", "data"], "title": "KubeconfigConfig"}, "KubernetesConfigInfo": {"properties": {"type": {"type": "string", "enum": ["kubernetes"], "title": "Type", "default": "kubernetes"}, "networking": {"$ref": "#/components/schemas/KubernetesNetworkingConfig"}}, "type": "object", "required": ["networking"], "title": "KubernetesConfigInfo"}, "KubernetesConfigInfoWithCreds": {"properties": {"type": {"type": "string", "enum": ["kubernetes"], "title": "Type", "default": "kubernetes"}, "networking": {"$ref": "#/components/schemas/KubernetesNetworkingConfig"}, "kubeconfig": {"$ref": "#/components/schemas/KubeconfigConfig"}}, "type": "object", "required": ["networking", "kubeconfig"], "title": "KubernetesConfigInfoWithCreds"}, "KubernetesConfigInfoWithCredsPartial": {"properties": {"type": {"type": "string", "enum": ["kubernetes"], "title": "Type", "default": "kubernetes"}, "networking": {"$ref": "#/components/schemas/KubernetesNetworkingConfig"}, "kubeconfig": {"$ref": "#/components/schemas/KubeconfigConfig"}}, "type": "object", "required": ["networking", "kubeconfig"], "title": "KubernetesConfigInfoWithCredsPartial"}, "KubernetesConfigValues": {"properties": {"type": {"type": "string", "enum": ["kubernetes"], "title": "Type", "default": "kubernetes"}}, "type": "object", "title": "KubernetesConfigValues"}, "KubernetesNetworkingConfig": {"properties": {"ssh_host": {"type": "string", "title": "Ssh Host"}, "ssh_port": {"type": "integer", "title": "Ssh Port"}}, "additionalProperties": false, "type": "object", "required": ["ssh_host", "ssh_port"], "title": "KubernetesNetworkingConfig"}, "LambdaAPIKeyCreds": {"properties": {"type": {"type": "string", "enum": ["api_key"], "title": "Type", "default": "api_key"}, "api_key": {"type": "string", "title": "Api Key"}}, "additionalProperties": false, "type": "object", "required": ["api_key"], "title": "LambdaAPIKeyCreds"}, "LambdaConfigInfo": {"properties": {"type": {"type": "string", "enum": ["lambda"], "title": "Type", "default": "lambda"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}}, "type": "object", "title": "LambdaConfigInfo"}, "LambdaConfigInfoWithCreds": {"properties": {"type": {"type": "string", "enum": ["lambda"], "title": "Type", "default": "lambda"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}, "creds": {"$ref": "#/components/schemas/LambdaAPIKeyCreds"}}, "type": "object", "required": ["creds"], "title": "LambdaConfigInfoWithCreds"}, "LambdaConfigInfoWithCredsPartial": {"properties": {"type": {"type": "string", "enum": ["lambda"], "title": "Type", "default": "lambda"}, "creds": {"$ref": "#/components/schemas/LambdaAPIKeyCreds"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}}, "type": "object", "title": "LambdaConfigInfoWithCredsPartial"}, "LambdaConfigValues": {"properties": {"type": {"type": "string", "enum": ["lambda"], "title": "Type", "default": "lambda"}, "regions": {"$ref": "#/components/schemas/ConfigMultiElement"}}, "type": "object", "title": "LambdaConfigValues"}, "ListRunsRequest": {"properties": {"project_name": {"type": "string", "title": "Project Name"}, "repo_id": {"type": "string", "title": "Repo Id"}}, "type": "object", "title": "ListRunsRequest"}, "ListSecretsRequest": {"properties": {"repo_id": {"type": "string", "title": "Repo Id"}}, "type": "object", "required": ["repo_id"], "title": "ListSecretsRequest"}, "LocalRepoInfo": {"properties": {"repo_type": {"type": "string", "enum": ["local"], "title": "Repo Type", "default": "local"}, "repo_dir": {"type": "string", "title": "Repo Dir"}}, "type": "object", "required": ["repo_dir"], "title": "LocalRepoInfo"}, "LocalRunRepoData": {"properties": {"repo_type": {"type": "string", "enum": ["local"], "title": "Repo Type", "default": "local"}, "repo_dir": {"type": "string", "title": "Repo Dir"}}, "type": "object", "required": ["repo_dir"], "title": "LocalRunRepoData"}, "LogEvent": {"properties": {"timestamp": {"type": "string", "format": "date-time", "title": "Timestamp"}, "log_source": {"$ref": "#/components/schemas/LogEventSource"}, "message": {"type": "string", "title": "Message"}}, "type": "object", "required": ["timestamp", "log_source", "message"], "title": "LogEvent"}, "LogEventSource": {"type": "string", "enum": ["stdout", "stderr"], "title": "LogEventSource", "description": "An enumeration."}, "Member": {"properties": {"user": {"$ref": "#/components/schemas/User"}, "project_role": {"$ref": "#/components/schemas/ProjectRole"}}, "type": "object", "required": ["user", "project_role"], "title": "Member"}, "MemberSetting": {"properties": {"username": {"type": "string", "title": "Username"}, "project_role": {"$ref": "#/components/schemas/ProjectRole"}}, "type": "object", "required": ["username", "project_role"], "title": "MemberSetting"}, "NebiusConfigInfo": {"properties": {"type": {"type": "string", "enum": ["nebius"], "title": "Type", "default": "nebius"}, "cloud_id": {"type": "string", "title": "Cloud Id"}, "folder_id": {"type": "string", "title": "Folder Id"}, "network_id": {"type": "string", "title": "Network Id"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}}, "type": "object", "required": ["cloud_id", "folder_id", "network_id"], "title": "NebiusConfigInfo"}, "NebiusConfigInfoWithCreds": {"properties": {"type": {"type": "string", "enum": ["nebius"], "title": "Type", "default": "nebius"}, "cloud_id": {"type": "string", "title": "Cloud Id"}, "folder_id": {"type": "string", "title": "Folder Id"}, "network_id": {"type": "string", "title": "Network Id"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}, "creds": {"$ref": "#/components/schemas/NebiusServiceAccountCreds"}}, "type": "object", "required": ["cloud_id", "folder_id", "network_id", "creds"], "title": "NebiusConfigInfoWithCreds"}, "NebiusConfigInfoWithCredsPartial": {"properties": {"type": {"type": "string", "enum": ["nebius"], "title": "Type", "default": "nebius"}, "creds": {"$ref": "#/components/schemas/NebiusServiceAccountCreds"}, "cloud_id": {"type": "string", "title": "Cloud Id"}, "folder_id": {"type": "string", "title": "Folder Id"}, "network_id": {"type": "string", "title": "Network Id"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}}, "type": "object", "title": "NebiusConfigInfoWithCredsPartial"}, "NebiusConfigValues": {"properties": {"type": {"type": "string", "enum": ["nebius"], "title": "Type", "default": "nebius"}, "cloud_id": {"$ref": "#/components/schemas/ConfigElement"}, "folder_id": {"$ref": "#/components/schemas/ConfigElement"}, "network_id": {"$ref": "#/components/schemas/ConfigElement"}, "regions": {"$ref": "#/components/schemas/ConfigMultiElement"}}, "type": "object", "title": "NebiusConfigValues"}, "NebiusServiceAccountCreds": {"properties": {"type": {"type": "string", "enum": ["service_account"], "title": "Type", "default": "service_account"}, "filename": {"type": "string", "title": "Filename"}, "data": {"type": "string", "title": "Data"}}, "additionalProperties": false, "type": "object", "required": ["filename", "data"], "title": "NebiusServiceAccountCreds"}, "OpenAIChatModel": {"properties": {"type": {"type": "string", "enum": ["chat"], "title": "Type", "description": "The type of the model"}, "name": {"type": "string", "title": "Name", "description": "The name of the model"}, "format": {"type": "string", "enum": ["openai"], "title": "Format"}, "prefix": {"type": "string", "title": "Prefix", "description": "The `base_url` prefix (after hostname)", "default": "/v1"}}, "type": "object", "required": ["type", "name", "format"], "title": "OpenAIChatModel", "description": "Mapping of the model for the OpenAI-compatible endpoint.\n\nAttributes:\n    type (str): The type of the model, e.g. \"chat\"\n    name (str): The name of the model. This name will be used both to load model configuration from the HuggingFace Hub and in the OpenAI-compatible endpoint.\n    format (str): The format of the model, i.e. \"openai\".\n    prefix (str): The `base_url` prefix: `http://hostname/{prefix}/chat/completions`. Defaults to `/v1`."}, "PollLogsRequest": {"properties": {"run_name": {"type": "string", "title": "Run Name"}, "job_submission_id": {"type": "string", "format": "uuid4", "title": "Job Submission Id"}, "start_time": {"type": "string", "format": "date-time", "title": "Start Time"}, "end_time": {"type": "string", "format": "date-time", "title": "End Time"}, "descending": {"type": "boolean", "title": "Descending", "default": false}, "limit": {"type": "integer", "maximum": 1000.0, "minimum": 0.0, "title": "Limit", "default": 100}, "diagnose": {"type": "boolean", "title": "Diagnose", "default": false}}, "type": "object", "required": ["run_name", "job_submission_id"], "title": "PollLogsRequest"}, "PortMapping": {"properties": {"local_port": {"type": "integer", "maximum": 65536.0, "exclusiveMinimum": 0.0, "title": "Local Port"}, "container_port": {"type": "integer", "maximum": 65536.0, "exclusiveMinimum": 0.0, "title": "Container Port"}}, "additionalProperties": false, "type": "object", "required": ["container_port"], "title": "PortMapping"}, "Profile": {"properties": {"name": {"type": "string", "title": "Name", "description": "The name of the profile that can be passed as `--profile` to `dstack run`"}, "backends": {"items": {"$ref": "#/components/schemas/BackendType"}, "type": "array", "description": "The backends to consider for provisionig (e.g., \"[aws, gcp]\")"}, "spot_policy": {"allOf": [{"$ref": "#/components/schemas/SpotPolicy"}], "description": "The policy for provisioning spot or on-demand instances: spot, on-demand, or auto"}, "retry_policy": {"allOf": [{"$ref": "#/components/schemas/ProfileRetryPolicy"}], "title": "Retry Policy", "description": "The policy for re-submitting the run"}, "max_duration": {"anyOf": [{"type": "string", "enum": ["off"]}, {"type": "string"}, {"type": "integer"}], "title": "Max Duration", "description": "The maximum duration of a run (e.g., 2h, 1d, etc). After it elapses, the run is forced to stop."}, "max_price": {"type": "number", "exclusiveMinimum": 0.0, "title": "Max Price", "description": "The maximum price per hour, in dollars"}, "default": {"type": "boolean", "title": "Default", "description": "If set to true, `dstack run` will use this profile by default.", "default": false}}, "additionalProperties": false, "type": "object", "required": ["name"], "title": "Profile"}, "ProfileRetryPolicy": {"properties": {"retry": {"type": "boolean", "title": "Retry", "description": "Whether to retry the run on failure or not", "default": false}, "limit": {"anyOf": [{"type": "integer"}, {"type": "string"}], "title": "Limit", "description": "The maximum period of retrying the run, e.g., 4h or 1d"}}, "additionalProperties": false, "type": "object", "title": "ProfileRetryPolicy"}, "Project": {"properties": {"project_id": {"type": "string", "format": "uuid4", "title": "Project Id"}, "project_name": {"type": "string", "title": "Project Name"}, "owner": {"$ref": "#/components/schemas/User"}, "backends": {"items": {"$ref": "#/components/schemas/BackendInfo"}, "type": "array", "title": "Backends"}, "members": {"items": {"$ref": "#/components/schemas/Member"}, "type": "array", "title": "Members"}}, "type": "object", "required": ["project_id", "project_name", "owner", "backends", "members"], "title": "Project"}, "ProjectRole": {"type": "string", "enum": ["admin", "user"], "title": "ProjectRole", "description": "An enumeration."}, "PythonVersion": {"type": "string", "enum": ["3.8", "3.9", "3.10", "3.11"], "title": "PythonVersion", "description": "An enumeration."}, "Range_Memory_": {"properties": {"min": {"type": "number", "title": "Min"}, "max": {"type": "number", "title": "Max"}}, "additionalProperties": false, "type": "object", "title": "Range[Memory]"}, "Range_int_": {"properties": {"min": {"type": "integer", "title": "Min"}, "max": {"type": "integer", "title": "Max"}}, "additionalProperties": false, "type": "object", "title": "Range[int]"}, "RefreshTokenRequest": {"properties": {"username": {"type": "string", "title": "Username"}}, "type": "object", "required": ["username"], "title": "RefreshTokenRequest"}, "RegistryAuth": {"properties": {"username": {"type": "string", "title": "Username", "description": "The username"}, "password": {"type": "string", "title": "Password", "description": "The password or access token"}}, "additionalProperties": false, "type": "object", "required": ["password"], "title": "RegistryAuth", "description": "Credentials for pulling a private Docker image.\n\nAttributes:\n    username (str): The username\n    password (str): The password or access token"}, "RemoteRepoCreds": {"properties": {"protocol": {"$ref": "#/components/schemas/RepoProtocol"}, "private_key": {"type": "string", "title": "Private Key"}, "oauth_token": {"type": "string", "title": "Oauth Token"}}, "type": "object", "required": ["protocol"], "title": "RemoteRepoCreds"}, "RemoteRepoInfo": {"properties": {"repo_type": {"type": "string", "enum": ["remote"], "title": "Repo Type", "default": "remote"}, "repo_host_name": {"type": "string", "title": "Repo Host Name"}, "repo_port": {"type": "integer", "title": "Repo Port"}, "repo_user_name": {"type": "string", "title": "Repo User Name"}, "repo_name": {"type": "string", "title": "Repo Name"}}, "type": "object", "required": ["repo_host_name", "repo_user_name", "repo_name"], "title": "RemoteRepoInfo"}, "RemoteRunRepoData": {"properties": {"repo_type": {"type": "string", "enum": ["remote"], "title": "Repo Type", "default": "remote"}, "repo_host_name": {"type": "string", "title": "Repo Host Name"}, "repo_port": {"type": "integer", "title": "Repo Port"}, "repo_user_name": {"type": "string", "title": "Repo User Name"}, "repo_name": {"type": "string", "title": "Repo Name"}, "repo_branch": {"type": "string", "title": "Repo Branch"}, "repo_hash": {"type": "string", "title": "Repo Hash"}, "repo_diff": {"type": "string", "title": "Repo Diff"}, "repo_config_name": {"type": "string", "title": "Repo Config Name"}, "repo_config_email": {"type": "string", "title": "Repo Config Email"}}, "type": "object", "required": ["repo_host_name", "repo_user_name", "repo_name"], "title": "RemoteRunRepoData"}, "RepoHead": {"properties": {"repo_id": {"type": "string", "title": "Repo Id"}, "repo_info": {"oneOf": [{"$ref": "#/components/schemas/RemoteRepoInfo"}, {"$ref": "#/components/schemas/LocalRepoInfo"}, {"$ref": "#/components/schemas/VirtualRepoInfo"}], "title": "Repo Info", "discriminator": {"propertyName": "repo_type", "mapping": {"remote": "#/components/schemas/RemoteRepoInfo", "local": "#/components/schemas/LocalRepoInfo", "virtual": "#/components/schemas/VirtualRepoInfo"}}}}, "type": "object", "required": ["repo_id", "repo_info"], "title": "RepoHead"}, "RepoHeadWithCreds": {"properties": {"repo_id": {"type": "string", "title": "Repo Id"}, "repo_info": {"oneOf": [{"$ref": "#/components/schemas/RemoteRepoInfo"}, {"$ref": "#/components/schemas/LocalRepoInfo"}, {"$ref": "#/components/schemas/VirtualRepoInfo"}], "title": "Repo Info", "discriminator": {"propertyName": "repo_type", "mapping": {"remote": "#/components/schemas/RemoteRepoInfo", "local": "#/components/schemas/LocalRepoInfo", "virtual": "#/components/schemas/VirtualRepoInfo"}}}, "repo_creds": {"$ref": "#/components/schemas/RemoteRepoCreds"}}, "type": "object", "required": ["repo_id", "repo_info"], "title": "RepoHeadWithCreds"}, "RepoProtocol": {"type": "string", "enum": ["ssh", "https"], "title": "RepoProtocol", "description": "An enumeration."}, "Requirements": {"properties": {"resources": {"$ref": "#/components/schemas/ResourcesSpec"}, "max_price": {"type": "number", "title": "Max Price"}, "spot": {"type": "boolean", "title": "Spot"}}, "type": "object", "required": ["resources"], "title": "Requirements"}, "Resources": {"properties": {"cpus": {"type": "integer", "title": "Cpus"}, "memory_mib": {"type": "integer", "title": "Memory Mib"}, "gpus": {"items": {"$ref": "#/components/schemas/Gpu"}, "type": "array", "title": "Gpus"}, "spot": {"type": "boolean", "title": "Spot"}, "disk": {"allOf": [{"$ref": "#/components/schemas/Disk"}], "title": "Disk", "default": {"size_mib": 102400}}, "description": {"type": "string", "title": "Description", "default": ""}}, "type": "object", "required": ["cpus", "memory_mib", "gpus", "spot"], "title": "Resources"}, "ResourcesSpec": {"properties": {"cpu": {"anyOf": [{"$ref": "#/definitions/Range_Union_int__str__"}, {"type": "integer"}, {"type": "string"}], "title": "Cpu", "description": "The number of CPU cores", "default": {"min": 2}}, "memory": {"anyOf": [{"$ref": "#/definitions/Range_Union_Memory__float__int__str__"}, {"type": "number"}, {"type": "integer"}, {"type": "string"}], "title": "Memory", "description": "The RAM size (e.g., 8GB)", "default": {"min": 8.0}}, "shm_size": {"anyOf": [{"type": "number"}, {"type": "number"}, {"type": "integer"}, {"type": "string"}], "title": "Shm Size", "description": "The size of shared memory (e.g., 8GB). If you are using parallel communicating processes (e.g., dataloaders in PyTorch), you may need to configure this."}, "gpu": {"anyOf": [{"$ref": "#/definitions/GPUSpec"}, {"$ref": "#/definitions/GPUSpecSchema"}, {"type": "integer"}, {"type": "string"}], "title": "Gpu", "description": "The GPU resources"}, "disk": {"anyOf": [{"$ref": "#/definitions/DiskSpec"}, {"$ref": "#/definitions/DiskSpecSchema"}, {"type": "number"}, {"type": "integer"}, {"type": "string"}], "title": "Disk", "description": "The disk resources"}}, "additionalProperties": false, "type": "object", "title": "ResourcesSpecSchema", "definitions": {"Range_Union_int__str__": {"title": "Range[Union[int, str]]", "type": "object", "properties": {"min": {"title": "Min", "anyOf": [{"type": "integer"}, {"type": "string"}]}, "max": {"title": "Max", "anyOf": [{"type": "integer"}, {"type": "string"}]}}, "additionalProperties": false}, "Range_Union_Memory__float__int__str__": {"title": "Range[Union[Memory, float, int, str]]", "type": "object", "properties": {"min": {"title": "Min", "anyOf": [{"type": "number"}, {"type": "number"}, {"type": "integer"}, {"type": "string"}]}, "max": {"title": "Max", "anyOf": [{"type": "number"}, {"type": "number"}, {"type": "integer"}, {"type": "string"}]}}, "additionalProperties": false}, "Range_int_": {"title": "Range[int]", "type": "object", "properties": {"min": {"title": "Min", "type": "integer"}, "max": {"title": "Max", "type": "integer"}}, "additionalProperties": false}, "Range_Memory_": {"title": "Range[Memory]", "type": "object", "properties": {"min": {"title": "Min", "type": "number"}, "max": {"title": "Max", "type": "number"}}, "additionalProperties": false}, "GPUSpec": {"title": "GPUSpec", "description": "The GPU spec\n\nAttributes:\n    name (Optional[List[str]]): The name of the GPU (e.g., `\"A100\"` or `\"H100\"`)\n    count (Optional[Range[int]]): The number of GPUs\n    memory (Optional[Range[Memory]]): The size of a single GPU memory (e.g., `\"16GB\"`)\n    total_memory (Optional[Range[Memory]]): The total size of all GPUs memory (e.g., `\"32GB\"`)\n    compute_capability (Optional[float]): The minimum compute capability of the GPU (e.g., `7.5`)", "type": "object", "properties": {"name": {"title": "Name", "type": "array", "items": {"type": "string"}}, "count": {"title": "Count", "default": {"min": 1, "max": 1}, "allOf": [{"$ref": "#/definitions/Range_int_"}]}, "memory": {"$ref": "#/definitions/Range_Memory_"}, "total_memory": {"$ref": "#/definitions/Range_Memory_"}, "compute_capability": {"title": "Compute Capability", "type": "array", "items": {}}}, "additionalProperties": false}, "GPUSpecSchema": {"title": "GPUSpecSchema", "type": "object", "properties": {"name": {"title": "Name", "description": "The GPU name or list of names", "anyOf": [{"type": "array", "items": {"type": "string"}}, {"type": "string"}]}, "count": {"title": "Count", "description": "The number of GPUs", "default": {"min": 1, "max": 1}, "anyOf": [{"$ref": "#/definitions/Range_Union_int__str__"}, {"type": "integer"}, {"type": "string"}]}, "memory": {"title": "Memory", "description": "The VRAM size (e.g., 16GB)", "anyOf": [{"$ref": "#/definitions/Range_Union_Memory__float__int__str__"}, {"type": "number"}, {"type": "integer"}, {"type": "string"}]}, "total_memory": {"title": "Total Memory", "description": "The total VRAM size (e.g., 32GB)", "anyOf": [{"$ref": "#/definitions/Range_Union_Memory__float__int__str__"}, {"type": "number"}, {"type": "integer"}, {"type": "string"}]}, "compute_capability": {"title": "Compute Capability", "description": "The minimum compute capability of the GPU (e.g., 7.5)", "anyOf": [{"type": "array", "items": {}}, {"type": "number"}, {"type": "string"}]}}, "additionalProperties": false}, "DiskSpec": {"title": "DiskSpec", "description": "The disk spec\n\nAttributes:\n    size (Range[Memory]): The size of the disk (e.g., `\"100GB\"`)", "type": "object", "properties": {"size": {"$ref": "#/definitions/Range_Memory_"}}, "required": ["size"], "additionalProperties": false}, "DiskSpecSchema": {"title": "DiskSpecSchema", "type": "object", "properties": {"size": {"title": "Size", "description": "The disk size (e.g., 100GB)", "anyOf": [{"$ref": "#/definitions/Range_Union_Memory__float__int__str__"}, {"type": "number"}, {"type": "integer"}, {"type": "string"}]}}, "required": ["size"], "additionalProperties": false}}}, "RetryPolicy": {"properties": {"retry": {"type": "boolean", "title": "Retry"}, "limit": {"type": "integer", "title": "Limit"}}, "type": "object", "required": ["retry"], "title": "RetryPolicy"}, "Run": {"properties": {"id": {"type": "string", "format": "uuid4", "title": "Id"}, "project_name": {"type": "string", "title": "Project Name"}, "user": {"type": "string", "title": "User"}, "submitted_at": {"type": "string", "format": "date-time", "title": "Submitted At"}, "status": {"$ref": "#/components/schemas/JobStatus"}, "run_spec": {"$ref": "#/components/schemas/RunSpec"}, "jobs": {"items": {"$ref": "#/components/schemas/Job"}, "type": "array", "title": "Jobs"}, "latest_job_submission": {"$ref": "#/components/schemas/JobSubmission"}, "cost": {"type": "number", "title": "Cost", "default": 0}}, "type": "object", "required": ["id", "project_name", "user", "submitted_at", "status", "run_spec", "jobs"], "title": "Run"}, "RunPlan": {"properties": {"project_name": {"type": "string", "title": "Project Name"}, "user": {"type": "string", "title": "User"}, "run_spec": {"$ref": "#/components/schemas/RunSpec"}, "job_plans": {"items": {"$ref": "#/components/schemas/JobPlan"}, "type": "array", "title": "Job Plans"}}, "type": "object", "required": ["project_name", "user", "run_spec", "job_plans"], "title": "RunPlan"}, "RunSpec": {"properties": {"run_name": {"type": "string", "title": "Run Name"}, "repo_id": {"type": "string", "title": "Repo Id"}, "repo_data": {"oneOf": [{"$ref": "#/components/schemas/RemoteRunRepoData"}, {"$ref": "#/components/schemas/LocalRunRepoData"}, {"$ref": "#/components/schemas/VirtualRunRepoData"}], "title": "Repo Data", "discriminator": {"propertyName": "repo_type", "mapping": {"remote": "#/components/schemas/RemoteRunRepoData", "local": "#/components/schemas/LocalRunRepoData", "virtual": "#/components/schemas/VirtualRunRepoData"}}}, "repo_code_hash": {"type": "string", "title": "Repo Code Hash"}, "working_dir": {"type": "string", "title": "Working Dir"}, "configuration_path": {"type": "string", "title": "Configuration Path"}, "configuration": {"oneOf": [{"$ref": "#/components/schemas/DevEnvironmentConfiguration"}, {"$ref": "#/components/schemas/TaskConfiguration"}, {"$ref": "#/components/schemas/ServiceConfiguration"}], "title": "Configuration", "discriminator": {"propertyName": "type", "mapping": {"dev-environment": "#/components/schemas/DevEnvironmentConfiguration", "task": "#/components/schemas/TaskConfiguration", "service": "#/components/schemas/ServiceConfiguration"}}}, "profile": {"$ref": "#/components/schemas/Profile"}, "ssh_key_pub": {"type": "string", "title": "Ssh Key Pub"}}, "type": "object", "required": ["repo_id", "repo_data", "working_dir", "configuration_path", "configuration", "profile", "ssh_key_pub"], "title": "RunSpec"}, "SSHConnectionParams": {"properties": {"hostname": {"type": "string", "title": "Hostname"}, "username": {"type": "string", "title": "Username"}, "port": {"type": "integer", "title": "Port"}}, "type": "object", "required": ["hostname", "username", "port"], "title": "SSHConnectionParams"}, "SaveRepoCredsRequest": {"properties": {"repo_id": {"type": "string", "title": "Repo Id"}, "repo_info": {"anyOf": [{"$ref": "#/components/schemas/RemoteRepoInfo"}, {"$ref": "#/components/schemas/LocalRepoInfo"}, {"$ref": "#/components/schemas/VirtualRepoInfo"}], "title": "Repo Info"}, "repo_creds": {"$ref": "#/components/schemas/RemoteRepoCreds"}}, "type": "object", "required": ["repo_id", "repo_info"], "title": "SaveRepoCredsRequest"}, "Secret": {"properties": {"name": {"type": "string", "title": "Name"}, "value": {"type": "string", "title": "Value"}}, "type": "object", "required": ["name", "value"], "title": "Secret"}, "ServiceConfiguration": {"properties": {"type": {"type": "string", "enum": ["service"], "title": "Type", "default": "service"}, "image": {"type": "string", "title": "Image", "description": "The name of the Docker image to run"}, "entrypoint": {"type": "string", "title": "Entrypoint", "description": "The Docker entrypoint"}, "home_dir": {"type": "string", "title": "Home Dir", "description": "The absolute path to the home directory inside the container", "default": "/root"}, "registry_auth": {"allOf": [{"$ref": "#/components/schemas/RegistryAuth"}], "title": "Registry Auth", "description": "Credentials for pulling a private Docker image"}, "python": {"allOf": [{"$ref": "#/components/schemas/PythonVersion"}], "description": "The major version of Python\nMutually exclusive with the image"}, "env": {"anyOf": [{"items": {"type": "string", "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*=.*$"}, "type": "array"}, {"additionalProperties": {"type": "string"}, "type": "object"}], "title": "Env", "description": "The mapping or the list of environment variables", "default": {}}, "setup": {"items": {"type": "string"}, "type": "array", "title": "Setup", "description": "The bash commands to run on the boot", "default": []}, "resources": {"allOf": [{"$ref": "#/components/schemas/ResourcesSpec"}], "title": "Resources", "description": "The resources requirements to run the configuration", "default": {"cpu": {"min": 2}, "memory": {"min": 8.0}}}, "commands": {"items": {"type": "string"}, "type": "array", "title": "Commands", "description": "The bash commands to run"}, "port": {"anyOf": [{"type": "integer", "maximum": 65536.0, "exclusiveMinimum": 0.0}, {"type": "string", "pattern": "^[0-9]+:[0-9]+$"}, {"$ref": "#/components/schemas/PortMapping"}], "title": "Port", "description": "The port, that application listens to or the mapping"}, "model": {"anyOf": [{"$ref": "#/components/schemas/TGIChatModel"}, {"$ref": "#/components/schemas/OpenAIChatModel"}], "title": "Model", "description": "Mapping of the model for the OpenAI-compatible endpoint"}, "auth": {"type": "boolean", "title": "Auth", "description": "Enable the authorization", "default": true}}, "additionalProperties": false, "type": "object", "required": ["commands", "port"], "title": "ServiceConfiguration", "description": "Attributes:\n    commands (List[str]): The bash commands to run\n    port (PortMapping): The port, that application listens to or the mapping\n    env (Dict[str, str]): The mapping or the list of environment variables\n    image (Optional[str]): The name of the Docker image to run\n    python (Optional[str]): The major version of Python\n    entrypoint (Optional[str]): The Docker entrypoint\n    registry_auth (Optional[RegistryAuth]): Credentials for pulling a private Docker image\n    home_dir (str): The absolute path to the home directory inside the container. Defaults to `/root`.\n    resources (Optional[ResourcesSpec]): The requirements to run the configuration.\n    model (Optional[ModelMapping]): Mapping of the model for the OpenAI-compatible endpoint.\n    auth (bool): Enable the authorization. Defaults to `True`."}, "SetDefaultGatewayRequest": {"properties": {"name": {"type": "string", "title": "Name"}}, "type": "object", "required": ["name"], "title": "SetDefaultGatewayRequest"}, "SetProjectMembersRequest": {"properties": {"members": {"items": {"$ref": "#/components/schemas/MemberSetting"}, "type": "array", "title": "Members"}}, "type": "object", "required": ["members"], "title": "SetProjectMembersRequest"}, "SetWildcardDomainRequest": {"properties": {"name": {"type": "string", "title": "Name"}, "wildcard_domain": {"type": "string", "title": "Wildcard Domain"}}, "type": "object", "required": ["name", "wildcard_domain"], "title": "SetWildcardDomainRequest"}, "SpotPolicy": {"type": "string", "enum": ["spot", "on-demand", "auto"], "title": "SpotPolicy", "description": "An enumeration."}, "StopRunsRequest": {"properties": {"runs_names": {"items": {"type": "string"}, "type": "array", "title": "Runs Names"}, "abort": {"type": "boolean", "title": "Abort"}}, "type": "object", "required": ["runs_names", "abort"], "title": "StopRunsRequest"}, "SubmitRunRequest": {"properties": {"run_spec": {"$ref": "#/components/schemas/RunSpec"}}, "type": "object", "required": ["run_spec"], "title": "SubmitRunRequest"}, "TGIChatModel": {"properties": {"type": {"type": "string", "enum": ["chat"], "title": "Type", "description": "The type of the model"}, "name": {"type": "string", "title": "Name", "description": "The name of the model"}, "format": {"type": "string", "enum": ["tgi"], "title": "Format"}, "chat_template": {"type": "string", "title": "Chat Template"}, "eos_token": {"type": "string", "title": "Eos Token"}}, "type": "object", "required": ["type", "name", "format"], "title": "TGIChatModel", "description": "Mapping of the model for the OpenAI-compatible endpoint.\n\nAttributes:\n    type (str): The type of the model, e.g. \"chat\"\n    name (str): The name of the model. This name will be used both to load model configuration from the HuggingFace Hub and in the OpenAI-compatible endpoint.\n    format (str): The format of the model, e.g. \"tgi\" if the model is served with HuggingFace's Text Generation Inference.\n    chat_template (Optional[str]): The custom prompt template for the model. If not specified, the default prompt template the HuggingFace Hub configuration will be used.\n    eos_token (Optional[str]): The custom end of sentence token. If not specified, the default custom end of sentence token from the HuggingFace Hub configuration will be used."}, "TaskConfiguration": {"properties": {"type": {"type": "string", "enum": ["task"], "title": "Type", "default": "task"}, "image": {"type": "string", "title": "Image", "description": "The name of the Docker image to run"}, "entrypoint": {"type": "string", "title": "Entrypoint", "description": "The Docker entrypoint"}, "home_dir": {"type": "string", "title": "Home Dir", "description": "The absolute path to the home directory inside the container", "default": "/root"}, "registry_auth": {"allOf": [{"$ref": "#/components/schemas/RegistryAuth"}], "title": "Registry Auth", "description": "Credentials for pulling a private Docker image"}, "python": {"allOf": [{"$ref": "#/components/schemas/PythonVersion"}], "description": "The major version of Python\nMutually exclusive with the image"}, "env": {"anyOf": [{"items": {"type": "string", "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*=.*$"}, "type": "array"}, {"additionalProperties": {"type": "string"}, "type": "object"}], "title": "Env", "description": "The mapping or the list of environment variables", "default": {}}, "setup": {"items": {"type": "string"}, "type": "array", "title": "Setup", "description": "The bash commands to run on the boot", "default": []}, "resources": {"allOf": [{"$ref": "#/components/schemas/ResourcesSpec"}], "title": "Resources", "description": "The resources requirements to run the configuration", "default": {"cpu": {"min": 2}, "memory": {"min": 8.0}}}, "ports": {"items": {"anyOf": [{"type": "integer", "maximum": 65536.0, "exclusiveMinimum": 0.0}, {"type": "string", "pattern": "^(?:[0-9]+|\\*):[0-9]+$"}, {"$ref": "#/components/schemas/PortMapping"}]}, "type": "array", "title": "Ports", "description": "Port numbers/mapping to expose", "default": []}, "commands": {"items": {"type": "string"}, "type": "array", "title": "Commands", "description": "The bash commands to run"}}, "additionalProperties": false, "type": "object", "required": ["commands"], "title": "TaskConfiguration", "description": "Attributes:\n    commands (List[str]): The bash commands to run\n    ports (List[PortMapping]): Port numbers/mapping to expose\n    env (Dict[str, str]): The mapping or the list of environment variables\n    image (Optional[str]): The name of the Docker image to run\n    python (Optional[str]): The major version of Python\n    entrypoint (Optional[str]): The Docker entrypoint\n    registry_auth (Optional[RegistryAuth]): Credentials for pulling a private Docker image\n    home_dir (str): The absolute path to the home directory inside the container. Defaults to `/root`.\n    resources (Optional[ResourcesSpec]): The requirements to run the configuration."}, "TensorDockAPIKeyCreds": {"properties": {"type": {"type": "string", "enum": ["api_key"], "title": "Type", "default": "api_key"}, "api_key": {"type": "string", "title": "Api Key"}, "api_token": {"type": "string", "title": "Api Token"}}, "additionalProperties": false, "type": "object", "required": ["api_key", "api_token"], "title": "TensorDockAPIKeyCreds"}, "TensorDockConfigInfo": {"properties": {"type": {"type": "string", "enum": ["tensordock"], "title": "Type", "default": "tensordock"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}}, "type": "object", "title": "TensorDockConfigInfo"}, "TensorDockConfigInfoWithCreds": {"properties": {"type": {"type": "string", "enum": ["tensordock"], "title": "Type", "default": "tensordock"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}, "creds": {"$ref": "#/components/schemas/TensorDockAPIKeyCreds"}}, "type": "object", "required": ["creds"], "title": "TensorDockConfigInfoWithCreds"}, "TensorDockConfigInfoWithCredsPartial": {"properties": {"type": {"type": "string", "enum": ["tensordock"], "title": "Type", "default": "tensordock"}, "creds": {"$ref": "#/components/schemas/TensorDockAPIKeyCreds"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}}, "type": "object", "title": "TensorDockConfigInfoWithCredsPartial"}, "TensorDockConfigValues": {"properties": {"type": {"type": "string", "enum": ["tensordock"], "title": "Type", "default": "tensordock"}, "regions": {"$ref": "#/components/schemas/ConfigMultiElement"}}, "type": "object", "title": "TensorDockConfigValues"}, "User": {"properties": {"id": {"type": "string", "format": "uuid4", "title": "Id"}, "username": {"type": "string", "title": "Username"}, "global_role": {"$ref": "#/components/schemas/GlobalRole"}, "email": {"type": "string", "title": "Email"}}, "type": "object", "required": ["id", "username", "global_role"], "title": "User"}, "UserTokenCreds": {"properties": {"token": {"type": "string", "title": "Token"}}, "type": "object", "required": ["token"], "title": "UserTokenCreds"}, "UserWithCreds": {"properties": {"id": {"type": "string", "format": "uuid4", "title": "Id"}, "username": {"type": "string", "title": "Username"}, "global_role": {"$ref": "#/components/schemas/GlobalRole"}, "email": {"type": "string", "title": "Email"}, "creds": {"$ref": "#/components/schemas/UserTokenCreds"}}, "type": "object", "required": ["id", "username", "global_role", "creds"], "title": "UserWithCreds"}, "ValidationError": {"properties": {"loc": {"items": {"anyOf": [{"type": "string"}, {"type": "integer"}]}, "type": "array", "title": "Location"}, "msg": {"type": "string", "title": "Message"}, "type": {"type": "string", "title": "Error Type"}}, "type": "object", "required": ["loc", "msg", "type"], "title": "ValidationError"}, "VastAIAPIKeyCreds": {"properties": {"type": {"type": "string", "enum": ["api_key"], "title": "Type", "default": "api_key"}, "api_key": {"type": "string", "title": "Api Key"}}, "additionalProperties": false, "type": "object", "required": ["api_key"], "title": "VastAIAPIKeyCreds"}, "VastAIConfigInfo": {"properties": {"type": {"type": "string", "enum": ["vastai"], "title": "Type", "default": "vastai"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}}, "type": "object", "title": "VastAIConfigInfo"}, "VastAIConfigInfoWithCreds": {"properties": {"type": {"type": "string", "enum": ["vastai"], "title": "Type", "default": "vastai"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}, "creds": {"$ref": "#/components/schemas/VastAIAPIKeyCreds"}}, "type": "object", "required": ["creds"], "title": "VastAIConfigInfoWithCreds"}, "VastAIConfigInfoWithCredsPartial": {"properties": {"type": {"type": "string", "enum": ["vastai"], "title": "Type", "default": "vastai"}, "creds": {"$ref": "#/components/schemas/VastAIAPIKeyCreds"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}}, "type": "object", "title": "VastAIConfigInfoWithCredsPartial"}, "VastAIConfigValues": {"properties": {"type": {"type": "string", "enum": ["vastai"], "title": "Type", "default": "vastai"}, "regions": {"$ref": "#/components/schemas/ConfigMultiElement"}}, "type": "object", "title": "VastAIConfigValues"}, "VirtualRepoInfo": {"properties": {"repo_type": {"type": "string", "enum": ["virtual"], "title": "Repo Type", "default": "virtual"}}, "type": "object", "title": "VirtualRepoInfo"}, "VirtualRunRepoData": {"properties": {"repo_type": {"type": "string", "enum": ["virtual"], "title": "Repo Type", "default": "virtual"}}, "type": "object", "title": "VirtualRunRepoData"}, "dstack___internal__core__models__gateways__Gateway": {"properties": {"name": {"type": "string", "title": "Name"}, "ip_address": {"type": "string", "title": "Ip Address"}, "instance_id": {"type": "string", "title": "Instance Id"}, "region": {"type": "string", "title": "Region"}, "wildcard_domain": {"type": "string", "title": "Wildcard Domain"}, "default": {"type": "boolean", "title": "Default"}, "created_at": {"type": "string", "format": "date-time", "title": "Created At"}, "backend": {"$ref": "#/components/schemas/BackendType"}}, "type": "object", "required": ["name", "region", "default", "created_at", "backend"], "title": "Gateway"}, "dstack___internal__core__models__runs__Gateway": {"properties": {"gateway_name": {"type": "string", "title": "Gateway Name"}, "service_port": {"type": "integer", "title": "Service Port"}, "hostname": {"type": "string", "title": "Hostname"}, "public_port": {"type": "integer", "title": "Public Port", "default": 80}, "secure": {"type": "boolean", "title": "Secure", "default": false}, "auth": {"type": "boolean", "title": "Auth", "default": true}, "options": {"type": "object", "title": "Options", "default": {}}}, "type": "object", "required": ["service_port"], "title": "Gateway"}}, "securitySchemes": {"HTTPBearer": {"type": "http", "scheme": "bearer"}}}}