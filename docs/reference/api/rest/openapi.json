{"openapi": "3.1.0", "info": {"title": "REST API", "description": "The REST API enables running tasks, services, and managing runs programmatically.", "version": "0.0.0"}, "servers": [{"url": "http://localhost:3000", "description": "Local server"}, {"url": "https://sky.dstack.ai", "description": "Managed server"}], "paths": {"/api/users/list": {"post": {"tags": ["users"], "summary": "List Users", "operationId": "list_users_api_users_list_post", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/UserRequest"}, "type": "array", "title": "Response List Users Api Users List Post"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/users/get_my_user": {"post": {"tags": ["users"], "summary": "Get My User", "operationId": "get_my_user_api_users_get_my_user_post", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserRequest"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/users/get_user": {"post": {"tags": ["users"], "summary": "Get User", "operationId": "get_user_api_users_get_user_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/GetUserRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserWithCredsRequest"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/users/create": {"post": {"tags": ["users"], "summary": "Create User", "operationId": "create_user_api_users_create_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CreateUserRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserRequest"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/users/update": {"post": {"tags": ["users"], "summary": "Update User", "operationId": "update_user_api_users_update_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CreateUserRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserRequest"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/users/refresh_token": {"post": {"tags": ["users"], "summary": "Refresh Token", "operationId": "refresh_token_api_users_refresh_token_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RefreshTokenRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserWithCredsRequest"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/users/delete": {"post": {"tags": ["users"], "summary": "Delete Users", "operationId": "delete_users_api_users_delete_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeleteUsersRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/projects/list": {"post": {"tags": ["projects"], "summary": "List Projects", "operationId": "list_projects_api_projects_list_post", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/ProjectRequest"}, "type": "array", "title": "Response List Projects Api Projects List Post"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/projects/create": {"post": {"tags": ["projects"], "summary": "Create Project", "operationId": "create_project_api_projects_create_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CreateProjectRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProjectRequest"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/projects/delete": {"post": {"tags": ["projects"], "summary": "Delete Projects", "operationId": "delete_projects_api_projects_delete_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeleteProjectsRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/projects/{project_name}/get": {"post": {"tags": ["projects"], "summary": "Get Project", "operationId": "get_project_api_projects__project_name__get_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProjectRequest"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/projects/{project_name}/set_members": {"post": {"tags": ["projects"], "summary": "Set Project Members", "operationId": "set_project_members_api_projects__project_name__set_members_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SetProjectMembersRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ProjectRequest"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/pools/list_instances": {"post": {"tags": ["pool"], "summary": "List Pool Instances", "description": "Returns all instances visible to user sorted by descending created_at.\nA **project_name** and **pool_name** can be specified as filters.\n\nThe results are paginated. To get the next page, pass created_at and id of\nthe last run from the previous page as **prev_created_at** and **prev_id**.", "operationId": "list_pool_instances_api_pools_list_instances_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ListPoolsRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/InstanceRequest"}, "type": "array", "title": "Response List Pool Instances Api Pools List Instances Post"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/pool/list": {"post": {"tags": ["pool"], "summary": "List Pool", "operationId": "list_pool_api_project__project_name__pool_list_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/PoolRequest"}, "type": "array", "title": "Response List Pool Api Project  Project Name  Pool List Post"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/pool/create": {"post": {"tags": ["pool"], "summary": "Create Pool", "operationId": "create_pool_api_project__project_name__pool_create_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CreatePoolRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/pool/set_default": {"post": {"tags": ["pool"], "summary": "Set Default Pool", "operationId": "set_default_pool_api_project__project_name__pool_set_default_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SetDefaultPoolRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/pool/delete": {"post": {"tags": ["pool"], "summary": "Delete Pool", "operationId": "delete_pool_api_project__project_name__pool_delete_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeletePoolRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/pool/show": {"post": {"tags": ["pool"], "summary": "Show Pool", "operationId": "show_pool_api_project__project_name__pool_show_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ShowPoolRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PoolInstancesRequest"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/pool/remove": {"post": {"tags": ["pool"], "summary": "Remove Instance", "operationId": "remove_instance_api_project__project_name__pool_remove_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RemoveInstanceRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/pool/add_remote": {"post": {"tags": ["pool"], "summary": "Add Instance", "operationId": "add_instance_api_project__project_name__pool_add_remote_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AddRemoteInstanceRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/InstanceRequest"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/backends/list_types": {"post": {"tags": ["backends"], "summary": "List Backend Types", "operationId": "list_backend_types_api_backends_list_types_post", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/BackendType"}, "type": "array"}}}}}}}, "/api/backends/config_values": {"post": {"tags": ["backends"], "summary": "Get Backend Config Values", "operationId": "get_backend_config_values_api_backends_config_values_post", "requestBody": {"content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/AWSConfigInfoWithCredsPartialRequest"}, {"$ref": "#/components/schemas/AzureConfigInfoWithCredsPartialRequest"}, {"$ref": "#/components/schemas/CudoConfigInfoWithCredsPartialRequest"}, {"$ref": "#/components/schemas/DataCrunchConfigInfoWithCredsPartialRequest"}, {"$ref": "#/components/schemas/GCPConfigInfoWithCredsPartialRequest"}, {"$ref": "#/components/schemas/KubernetesConfigInfoWithCredsPartialRequest"}, {"$ref": "#/components/schemas/LambdaConfigInfoWithCredsPartialRequest"}, {"$ref": "#/components/schemas/NebiusConfigInfoWithCredsPartialRequest"}, {"$ref": "#/components/schemas/OCIConfigInfoWithCredsPartialRequest"}, {"$ref": "#/components/schemas/RunpodConfigInfoWithCredsPartialRequest"}, {"$ref": "#/components/schemas/TensorDockConfigInfoWithCredsPartialRequest"}, {"$ref": "#/components/schemas/VastAIConfigInfoWithCredsPartialRequest"}, {"$ref": "#/components/schemas/DstackConfigInfoRequest"}], "title": "Body"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/AWSConfigValuesRequest"}, {"$ref": "#/components/schemas/AzureConfigValuesRequest"}, {"$ref": "#/components/schemas/CudoConfigValuesRequest"}, {"$ref": "#/components/schemas/DataCrunchConfigValuesRequest"}, {"$ref": "#/components/schemas/GCPConfigValuesRequest"}, {"$ref": "#/components/schemas/KubernetesConfigValuesRequest"}, {"$ref": "#/components/schemas/LambdaConfigValuesRequest"}, {"$ref": "#/components/schemas/NebiusConfigValuesRequest"}, {"$ref": "#/components/schemas/OCIConfigValuesRequest"}, {"$ref": "#/components/schemas/RunpodConfigValuesRequest"}, {"$ref": "#/components/schemas/TensorDockConfigValuesRequest"}, {"$ref": "#/components/schemas/VastAIConfigValuesRequest"}, {"$ref": "#/components/schemas/DstackConfigValuesRequest"}], "title": "Response Get Backend Config Values Api Backends Config Values Post"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/backends/create": {"post": {"tags": ["backends"], "summary": "Create Backend", "operationId": "create_backend_api_project__project_name__backends_create_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/AWSConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/AzureConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/CudoConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/DataCrunchConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/GCPConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/KubernetesConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/LambdaConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/NebiusConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/OCIConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/RunpodConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/TensorDockConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/VastAIConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/DstackConfigInfoRequest"}], "title": "Body"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/AWSConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/AzureConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/CudoConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/DataCrunchConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/GCPConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/KubernetesConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/LambdaConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/NebiusConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/OCIConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/RunpodConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/TensorDockConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/VastAIConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/DstackConfigInfoRequest"}], "title": "Response Create Backend Api Project  Project Name  Backends Create Post"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/backends/update": {"post": {"tags": ["backends"], "summary": "Update Backend", "operationId": "update_backend_api_project__project_name__backends_update_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/AWSConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/AzureConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/CudoConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/DataCrunchConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/GCPConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/KubernetesConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/LambdaConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/NebiusConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/OCIConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/RunpodConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/TensorDockConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/VastAIConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/DstackConfigInfoRequest"}], "title": "Body"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/AWSConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/AzureConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/CudoConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/DataCrunchConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/GCPConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/KubernetesConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/LambdaConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/NebiusConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/OCIConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/RunpodConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/TensorDockConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/VastAIConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/DstackConfigInfoRequest"}], "title": "Response Update Backend Api Project  Project Name  Backends Update Post"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/backends/delete": {"post": {"tags": ["backends"], "summary": "Delete Backends", "operationId": "delete_backends_api_project__project_name__backends_delete_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeleteBackendsRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/backends/{backend_name}/config_info": {"post": {"tags": ["backends"], "summary": "Get Backend Config Info", "operationId": "get_backend_config_info_api_project__project_name__backends__backend_name__config_info_post", "parameters": [{"required": true, "schema": {"$ref": "#/components/schemas/BackendType"}, "name": "backend_name", "in": "path"}, {"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/AWSConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/AzureConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/CudoConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/DataCrunchConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/GCPConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/KubernetesConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/LambdaConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/NebiusConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/OCIConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/RunpodConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/TensorDockConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/VastAIConfigInfoWithCredsRequest"}, {"$ref": "#/components/schemas/DstackConfigInfoRequest"}], "title": "Response Get Backend Config Info Api Project  Project Name  Backends  Backend Name  Config Info Post"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/backends/create_yaml": {"post": {"tags": ["backends"], "summary": "Create Backend Yaml", "operationId": "create_backend_yaml_api_project__project_name__backends_create_yaml_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CreateBackendYAMLRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/backends/update_yaml": {"post": {"tags": ["backends"], "summary": "Update Backend Yaml", "operationId": "update_backend_yaml_api_project__project_name__backends_update_yaml_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UpdateBackendYAMLRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/backends/{backend_name}/get_yaml": {"post": {"tags": ["backends"], "summary": "Get Backend Yaml", "operationId": "get_backend_yaml_api_project__project_name__backends__backend_name__get_yaml_post", "parameters": [{"required": true, "schema": {"$ref": "#/components/schemas/BackendType"}, "name": "backend_name", "in": "path"}, {"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BackendInfoYAMLRequest"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/repos/list": {"post": {"tags": ["repos"], "summary": "List Repos", "operationId": "list_repos_api_project__project_name__repos_list_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/RepoHeadRequest"}, "type": "array", "title": "Response List Repos Api Project  Project Name  Repos List Post"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/repos/get": {"post": {"tags": ["repos"], "summary": "Get Repo", "operationId": "get_repo_api_project__project_name__repos_get_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/GetRepoRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RepoHeadWithCredsRequest"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/repos/init": {"post": {"tags": ["repos"], "summary": "Init Repo", "operationId": "init_repo_api_project__project_name__repos_init_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SaveRepoCredsRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/repos/delete": {"post": {"tags": ["repos"], "summary": "Delete Repos", "operationId": "delete_repos_api_project__project_name__repos_delete_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeleteReposRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/repos/upload_code": {"post": {"tags": ["repos"], "summary": "Upload Code", "operationId": "upload_code_api_project__project_name__repos_upload_code_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}, {"required": true, "schema": {"type": "string", "title": "Repo Id"}, "name": "repo_id", "in": "query"}], "requestBody": {"content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/Body_upload_code_api_project__project_name__repos_upload_code_post"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/runs/list": {"post": {"tags": ["runs"], "summary": "List Runs", "description": "Returns all runs visible to user sorted by descending submitted_at.\nA **project_name**, **repo_id**, and **username** can be specified as filters.\nSpecifying **repo_id** without **project_name** returns no runs.\n\nThe results are paginated. To get the next page, pass submitted_at and id of\nthe last run from the previous page as **prev_submitted_at** and **prev_run_id**.", "operationId": "list_runs_api_runs_list_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ListRunsRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/RunRequest"}, "type": "array", "title": "Response List Runs Api Runs List Post"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/runs/get": {"post": {"tags": ["runs"], "summary": "Get Run", "operationId": "get_run_api_project__project_name__runs_get_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/GetRunRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RunRequest"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/runs/get_plan": {"post": {"tags": ["runs"], "summary": "Get Run Plan", "operationId": "get_run_plan_api_project__project_name__runs_get_plan_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/GetRunPlanRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RunPlanRequest"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/runs/submit": {"post": {"tags": ["runs"], "summary": "Submit Run", "operationId": "submit_run_api_project__project_name__runs_submit_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SubmitRunRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RunRequest"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/runs/stop": {"post": {"tags": ["runs"], "summary": "Stop Runs", "operationId": "stop_runs_api_project__project_name__runs_stop_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/StopRunsRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/runs/delete": {"post": {"tags": ["runs"], "summary": "Delete Runs", "operationId": "delete_runs_api_project__project_name__runs_delete_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeleteRunsRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/runs/get_offers": {"post": {"tags": ["runs"], "summary": "Get Offers", "operationId": "get_offers_api_project__project_name__runs_get_offers_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/GetOffersRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PoolInstanceOffersRequest"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/runs/create_instance": {"post": {"tags": ["runs"], "summary": "Create Instance", "operationId": "create_instance_api_project__project_name__runs_create_instance_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CreateInstanceRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/InstanceRequest"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/logs/poll": {"post": {"tags": ["logs"], "summary": "Poll Logs", "operationId": "poll_logs_api_project__project_name__logs_poll_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PollLogsRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/JobSubmissionLogsRequest"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/secrets/list": {"post": {"tags": ["secrets"], "summary": "List Secrets", "operationId": "list_secrets_api_project__project_name__secrets_list_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ListSecretsRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/RunRequest"}, "type": "array", "title": "Response List Secrets Api Project  Project Name  Secrets List Post"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/project/{project_name}/secrets/get": {"post": {"tags": ["secrets"], "summary": "Get Secret", "operationId": "get_secret_api_project__project_name__secrets_get_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/GetSecretsRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SecretRequest"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/project/{project_name}/secrets/add": {"post": {"tags": ["secrets"], "summary": "Add Or Update Secret", "operationId": "add_or_update_secret_api_project__project_name__secrets_add_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AddSecretRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SecretRequest"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/project/{project_name}/secrets/delete": {"post": {"tags": ["secrets"], "summary": "Delete Secrets", "operationId": "delete_secrets_api_project__project_name__secrets_delete_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeleteSecretsRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/project/{project_name}/gateways/list": {"post": {"tags": ["gateways"], "summary": "List Gateways", "operationId": "list_gateways_api_project__project_name__gateways_list_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/GatewayRequest"}, "type": "array", "title": "Response List Gateways Api Project  Project Name  Gateways List Post"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/gateways/get": {"post": {"tags": ["gateways"], "summary": "Get Gateway", "operationId": "get_gateway_api_project__project_name__gateways_get_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/GetGatewayRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/GatewayRequest"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/gateways/create": {"post": {"tags": ["gateways"], "summary": "Create Gateway", "operationId": "create_gateway_api_project__project_name__gateways_create_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CreateGatewayRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/GatewayRequest"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/gateways/delete": {"post": {"tags": ["gateways"], "summary": "Delete Gateways", "operationId": "delete_gateways_api_project__project_name__gateways_delete_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DeleteGatewaysRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/gateways/set_default": {"post": {"tags": ["gateways"], "summary": "Set Default Gateway", "operationId": "set_default_gateway_api_project__project_name__gateways_set_default_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SetDefaultGatewayRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/api/project/{project_name}/gateways/set_wildcard_domain": {"post": {"tags": ["gateways"], "summary": "Set Gateway Wildcard Domain", "operationId": "set_gateway_wildcard_domain_api_project__project_name__gateways_set_wildcard_domain_post", "parameters": [{"required": true, "schema": {"type": "string", "title": "Project Name"}, "name": "project_name", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SetWildcardDomainRequestRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/GatewayRequest"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/healthcheck": {"get": {"summary": "Healthcheck", "operationId": "healthcheck_healthcheck_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/": {"get": {"summary": "Index", "operationId": "index__get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}}, "components": {"schemas": {"ACMGatewayCertificateRequest": {"properties": {"type": {"type": "string", "enum": ["acm"], "title": "Type", "description": "Certificates by AWS Certificate Manager (ACM)", "default": "acm"}, "arn": {"type": "string", "title": "Arn", "description": "The ARN of the wildcard ACM certificate for the domain"}}, "additionalProperties": false, "type": "object", "required": ["arn"], "title": "ACMGatewayCertificateRequest"}, "AWSAccessKeyCredsRequest": {"properties": {"type": {"type": "string", "enum": ["access_key"], "title": "Type", "description": "The type of credentials", "default": "access_key"}, "access_key": {"type": "string", "title": "Access Key", "description": "The access key"}, "secret_key": {"type": "string", "title": "Secret Key", "description": "The secret key"}}, "additionalProperties": false, "type": "object", "required": ["access_key", "secret_key"], "title": "AWSAccessKeyCredsRequest"}, "AWSConfigInfoRequest": {"properties": {"type": {"type": "string", "enum": ["aws"], "title": "Type", "default": "aws"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}, "vpc_name": {"type": "string", "title": "Vpc Name"}, "vpc_ids": {"additionalProperties": {"type": "string"}, "type": "object", "title": "Vpc Ids"}, "default_vpcs": {"type": "boolean", "title": "Default Vpcs"}, "public_ips": {"type": "boolean", "title": "Public Ips"}}, "additionalProperties": false, "type": "object", "title": "AWSConfigInfoRequest"}, "AWSConfigInfoWithCredsPartialRequest": {"properties": {"type": {"type": "string", "enum": ["aws"], "title": "Type", "default": "aws"}, "creds": {"anyOf": [{"$ref": "#/components/schemas/AWSAccessKeyCredsRequest"}, {"$ref": "#/components/schemas/AWSDefaultCredsRequest"}], "title": "Creds"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}, "vpc_name": {"type": "string", "title": "Vpc Name"}, "vpc_ids": {"additionalProperties": {"type": "string"}, "type": "object", "title": "Vpc Ids"}, "default_vpcs": {"type": "boolean", "title": "Default Vpcs"}, "public_ips": {"type": "boolean", "title": "Public Ips"}}, "additionalProperties": false, "type": "object", "title": "AWSConfigInfoWithCredsPartialRequest"}, "AWSConfigInfoWithCredsRequest": {"properties": {"type": {"type": "string", "enum": ["aws"], "title": "Type", "default": "aws"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}, "vpc_name": {"type": "string", "title": "Vpc Name"}, "vpc_ids": {"additionalProperties": {"type": "string"}, "type": "object", "title": "Vpc Ids"}, "default_vpcs": {"type": "boolean", "title": "Default Vpcs"}, "public_ips": {"type": "boolean", "title": "Public Ips"}, "creds": {"anyOf": [{"$ref": "#/components/schemas/AWSAccessKeyCredsRequest"}, {"$ref": "#/components/schemas/AWSDefaultCredsRequest"}], "title": "Creds"}}, "additionalProperties": false, "type": "object", "required": ["creds"], "title": "AWSConfigInfoWithCredsRequest"}, "AWSConfigValuesRequest": {"properties": {"type": {"type": "string", "enum": ["aws"], "title": "Type", "default": "aws"}, "default_creds": {"type": "boolean", "title": "Default Creds", "default": false}, "regions": {"$ref": "#/components/schemas/ConfigMultiElementRequest"}}, "additionalProperties": false, "type": "object", "title": "AWSConfigValuesRequest"}, "AWSDefaultCredsRequest": {"properties": {"type": {"type": "string", "enum": ["default"], "title": "Type", "description": "The type of credentials", "default": "default"}}, "additionalProperties": false, "type": "object", "title": "AWSDefaultCredsRequest"}, "AddRemoteInstanceRequestRequest": {"properties": {"pool_name": {"type": "string", "title": "Pool Name"}, "instance_name": {"type": "string", "title": "Instance Name"}, "instance_network": {"type": "string", "title": "Instance Network"}, "region": {"type": "string", "title": "Region"}, "host": {"type": "string", "title": "Host"}, "port": {"type": "integer", "title": "Port"}, "ssh_user": {"type": "string", "title": "Ssh User"}, "ssh_keys": {"items": {"$ref": "#/components/schemas/SSHKeyRequest"}, "type": "array", "title": "Ssh Keys"}}, "additionalProperties": false, "type": "object", "required": ["host", "port", "ssh_user", "ssh_keys"], "title": "AddRemoteInstanceRequestRequest"}, "AddSecretRequestRequest": {"properties": {"repo_id": {"type": "string", "title": "Repo Id"}, "secret": {"$ref": "#/components/schemas/SecretRequest"}}, "additionalProperties": false, "type": "object", "required": ["repo_id", "secret"], "title": "AddSecretRequestRequest"}, "AppSpecRequest": {"properties": {"port": {"type": "integer", "title": "Port"}, "map_to_port": {"type": "integer", "title": "Map To Port"}, "app_name": {"type": "string", "title": "App Name"}, "url_path": {"type": "string", "title": "Url Path"}, "url_query_params": {"additionalProperties": {"type": "string"}, "type": "object", "title": "Url Query Params"}}, "additionalProperties": false, "type": "object", "required": ["port", "app_name"], "title": "AppSpecRequest"}, "AzureClientCredsRequest": {"properties": {"type": {"type": "string", "enum": ["client"], "title": "Type", "description": "The type of credentials", "default": "client"}, "client_id": {"type": "string", "title": "Client Id", "description": "The client ID"}, "client_secret": {"type": "string", "title": "Client Secret", "description": "The client secret"}, "tenant_id": {"type": "string", "title": "Tenant Id"}}, "additionalProperties": false, "type": "object", "required": ["client_id", "client_secret"], "title": "AzureClientCredsRequest"}, "AzureConfigInfoRequest": {"properties": {"type": {"type": "string", "enum": ["azure"], "title": "Type", "default": "azure"}, "tenant_id": {"type": "string", "title": "Tenant Id"}, "subscription_id": {"type": "string", "title": "Subscription Id"}, "locations": {"items": {"type": "string"}, "type": "array", "title": "Locations"}}, "additionalProperties": false, "type": "object", "required": ["tenant_id", "subscription_id"], "title": "AzureConfigInfoRequest"}, "AzureConfigInfoWithCredsPartialRequest": {"properties": {"type": {"type": "string", "enum": ["azure"], "title": "Type", "default": "azure"}, "creds": {"anyOf": [{"$ref": "#/components/schemas/AzureClientCredsRequest"}, {"$ref": "#/components/schemas/AzureDefaultCredsRequest"}], "title": "Creds"}, "tenant_id": {"type": "string", "title": "Tenant Id"}, "subscription_id": {"type": "string", "title": "Subscription Id"}, "locations": {"items": {"type": "string"}, "type": "array", "title": "Locations"}}, "additionalProperties": false, "type": "object", "title": "AzureConfigInfoWithCredsPartialRequest"}, "AzureConfigInfoWithCredsRequest": {"properties": {"type": {"type": "string", "enum": ["azure"], "title": "Type", "default": "azure"}, "tenant_id": {"type": "string", "title": "Tenant Id"}, "subscription_id": {"type": "string", "title": "Subscription Id"}, "locations": {"items": {"type": "string"}, "type": "array", "title": "Locations"}, "creds": {"anyOf": [{"$ref": "#/components/schemas/AzureClientCredsRequest"}, {"$ref": "#/components/schemas/AzureDefaultCredsRequest"}], "title": "Creds"}}, "additionalProperties": false, "type": "object", "required": ["tenant_id", "subscription_id", "creds"], "title": "AzureConfigInfoWithCredsRequest"}, "AzureConfigValuesRequest": {"properties": {"type": {"type": "string", "enum": ["azure"], "title": "Type", "default": "azure"}, "default_creds": {"type": "boolean", "title": "Default Creds", "default": false}, "tenant_id": {"$ref": "#/components/schemas/ConfigElementRequest"}, "subscription_id": {"$ref": "#/components/schemas/ConfigElementRequest"}, "locations": {"$ref": "#/components/schemas/ConfigMultiElementRequest"}}, "additionalProperties": false, "type": "object", "title": "AzureConfigValuesRequest"}, "AzureDefaultCredsRequest": {"properties": {"type": {"type": "string", "enum": ["default"], "title": "Type", "description": "The type of credentials", "default": "default"}}, "additionalProperties": false, "type": "object", "title": "AzureDefaultCredsRequest"}, "BackendInfoRequest": {"properties": {"name": {"type": "string", "title": "Name"}, "config": {"anyOf": [{"$ref": "#/components/schemas/AWSConfigInfoRequest"}, {"$ref": "#/components/schemas/AzureConfigInfoRequest"}, {"$ref": "#/components/schemas/CudoConfigInfoRequest"}, {"$ref": "#/components/schemas/DataCrunchConfigInfoRequest"}, {"$ref": "#/components/schemas/GCPConfigInfoRequest"}, {"$ref": "#/components/schemas/KubernetesConfigInfoRequest"}, {"$ref": "#/components/schemas/LambdaConfigInfoRequest"}, {"$ref": "#/components/schemas/NebiusConfigInfoRequest"}, {"$ref": "#/components/schemas/OCIConfigInfoRequest"}, {"$ref": "#/components/schemas/RunpodConfigInfoRequest"}, {"$ref": "#/components/schemas/TensorDockConfigInfoRequest"}, {"$ref": "#/components/schemas/VastAIConfigInfoRequest"}, {"$ref": "#/components/schemas/DstackConfigInfoRequest"}, {"$ref": "#/components/schemas/DstackBaseBackendConfigInfoRequest"}], "title": "Config"}}, "additionalProperties": false, "type": "object", "required": ["name", "config"], "title": "BackendInfoRequest"}, "BackendInfoYAMLRequest": {"properties": {"name": {"type": "string", "title": "Name"}, "config_yaml": {"type": "string", "title": "Config Yaml"}}, "additionalProperties": false, "type": "object", "required": ["name", "config_yaml"], "title": "BackendInfoYAMLRequest"}, "BackendType": {"type": "string", "enum": ["aws", "azure", "cudo", "datacrunch", "dstack", "gcp", "kubernetes", "lambda", "local", "remote", "nebius", "oci", "runpod", "tensordock", "vastai"], "title": "BackendType", "description": "Attributes:\n    AWS (BackendType): Amazon Web Services\n    AZURE (BackendType): Microsoft Azure\n    CUDO (BackendType): Cudo\n    DSTACK (BackendType): dstack Sky\n    GCP (BackendType): Google Cloud Platform\n    DATACRUNCH (BackendType): DataCrunch\n    KUBERNETES (BackendType): Kubernetes\n    LAMBDA (BackendType): Lambda Cloud\n    RUNPOD (BackendType): Runpod Cloud\n    TENSORDOCK (BackendType): TensorDock Marketplace\n    VASTAI (BackendType): Vast.ai Marketplace"}, "Body_upload_code_api_project__project_name__repos_upload_code_post": {"properties": {"file": {"type": "string", "format": "binary", "title": "File"}}, "type": "object", "required": ["file"], "title": "Body_upload_code_api_project__project_name__repos_upload_code_post"}, "ConfigElementRequest": {"properties": {"selected": {"type": "string", "title": "Selected"}, "values": {"items": {"$ref": "#/components/schemas/ConfigElementValueRequest"}, "type": "array", "title": "Values", "default": []}}, "additionalProperties": false, "type": "object", "title": "ConfigElementRequest"}, "ConfigElementValueRequest": {"properties": {"value": {"type": "string", "title": "Value"}, "label": {"type": "string", "title": "Label"}}, "additionalProperties": false, "type": "object", "required": ["value", "label"], "title": "ConfigElementValueRequest"}, "ConfigMultiElementRequest": {"properties": {"selected": {"items": {"type": "string"}, "type": "array", "title": "Selected", "default": []}, "values": {"items": {"$ref": "#/components/schemas/ConfigElementValueRequest"}, "type": "array", "title": "Values", "default": []}}, "additionalProperties": false, "type": "object", "title": "ConfigMultiElementRequest"}, "CreateBackendYAMLRequestRequest": {"properties": {"config_yaml": {"type": "string", "title": "Config Yaml"}}, "additionalProperties": false, "type": "object", "required": ["config_yaml"], "title": "CreateBackendYAMLRequestRequest"}, "CreateGatewayRequestRequest": {"properties": {"name": {"type": "string", "title": "Name"}, "backend_type": {"$ref": "#/components/schemas/BackendType"}, "region": {"type": "string", "title": "Region"}, "configuration": {"$ref": "#/components/schemas/GatewayConfigurationRequest"}}, "additionalProperties": false, "type": "object", "title": "CreateGatewayRequestRequest"}, "CreateInstanceRequestRequest": {"properties": {"profile": {"$ref": "#/components/schemas/ProfileRequest"}, "requirements": {"$ref": "#/components/schemas/RequirementsRequest"}}, "additionalProperties": false, "type": "object", "required": ["profile", "requirements"], "title": "CreateInstanceRequestRequest"}, "CreatePoolRequestRequest": {"properties": {"name": {"type": "string", "title": "Name"}}, "additionalProperties": false, "type": "object", "required": ["name"], "title": "CreatePoolRequestRequest"}, "CreateProjectRequestRequest": {"properties": {"project_name": {"type": "string", "title": "Project Name"}}, "additionalProperties": false, "type": "object", "required": ["project_name"], "title": "CreateProjectRequestRequest"}, "CreateUserRequestRequest": {"properties": {"username": {"type": "string", "title": "Username"}, "global_role": {"$ref": "#/components/schemas/GlobalRole"}, "email": {"type": "string", "title": "Email"}}, "additionalProperties": false, "type": "object", "required": ["username", "global_role"], "title": "CreateUserRequestRequest"}, "CreationPolicy": {"type": "string", "enum": ["reuse", "reuse-or-create"], "title": "CreationPolicy", "description": "An enumeration."}, "CudoAPIKeyCredsRequest": {"properties": {"type": {"type": "string", "enum": ["api_key"], "title": "Type", "description": "The type of credentials", "default": "api_key"}, "api_key": {"type": "string", "title": "Api Key", "description": "The API key"}}, "additionalProperties": false, "type": "object", "required": ["api_key"], "title": "CudoAPIKeyCredsRequest"}, "CudoConfigInfoRequest": {"properties": {"type": {"type": "string", "enum": ["cudo"], "title": "Type", "default": "cudo"}, "project_id": {"type": "string", "title": "Project Id"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}}, "additionalProperties": false, "type": "object", "required": ["project_id"], "title": "CudoConfigInfoRequest"}, "CudoConfigInfoWithCredsPartialRequest": {"properties": {"type": {"type": "string", "enum": ["cudo"], "title": "Type", "default": "cudo"}, "creds": {"$ref": "#/components/schemas/CudoAPIKeyCredsRequest"}, "project_id": {"type": "string", "title": "Project Id"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}}, "additionalProperties": false, "type": "object", "title": "CudoConfigInfoWithCredsPartialRequest"}, "CudoConfigInfoWithCredsRequest": {"properties": {"type": {"type": "string", "enum": ["cudo"], "title": "Type", "default": "cudo"}, "project_id": {"type": "string", "title": "Project Id"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}, "creds": {"$ref": "#/components/schemas/CudoAPIKeyCredsRequest"}}, "additionalProperties": false, "type": "object", "required": ["project_id", "creds"], "title": "CudoConfigInfoWithCredsRequest"}, "CudoConfigValuesRequest": {"properties": {"type": {"type": "string", "enum": ["cudo"], "title": "Type", "default": "cudo"}, "regions": {"$ref": "#/components/schemas/ConfigMultiElementRequest"}, "project_id": {"$ref": "#/components/schemas/ConfigElementRequest"}}, "additionalProperties": false, "type": "object", "title": "CudoConfigValuesRequest"}, "DataCrunchAPIKeyCredsRequest": {"properties": {"type": {"type": "string", "enum": ["api_key"], "title": "Type", "description": "The type of credentials", "default": "api_key"}, "client_id": {"type": "string", "title": "Client Id", "description": "The client ID"}, "client_secret": {"type": "string", "title": "Client Secret", "description": "The client secret"}}, "additionalProperties": false, "type": "object", "required": ["client_id", "client_secret"], "title": "DataCrunchAPIKeyCredsRequest"}, "DataCrunchConfigInfoRequest": {"properties": {"type": {"type": "string", "enum": ["datacrunch"], "title": "Type", "default": "datacrunch"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}}, "additionalProperties": false, "type": "object", "title": "DataCrunchConfigInfoRequest"}, "DataCrunchConfigInfoWithCredsPartialRequest": {"properties": {"type": {"type": "string", "enum": ["datacrunch"], "title": "Type", "default": "datacrunch"}, "creds": {"$ref": "#/components/schemas/DataCrunchAPIKeyCredsRequest"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}}, "additionalProperties": false, "type": "object", "title": "DataCrunchConfigInfoWithCredsPartialRequest"}, "DataCrunchConfigInfoWithCredsRequest": {"properties": {"type": {"type": "string", "enum": ["datacrunch"], "title": "Type", "default": "datacrunch"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}, "creds": {"$ref": "#/components/schemas/DataCrunchAPIKeyCredsRequest"}}, "additionalProperties": false, "type": "object", "required": ["creds"], "title": "DataCrunchConfigInfoWithCredsRequest"}, "DataCrunchConfigValuesRequest": {"properties": {"type": {"type": "string", "enum": ["datacrunch"], "title": "Type", "default": "datacrunch"}, "regions": {"$ref": "#/components/schemas/ConfigMultiElementRequest"}}, "additionalProperties": false, "type": "object", "title": "DataCrunchConfigValuesRequest"}, "DeleteBackendsRequestRequest": {"properties": {"backends_names": {"items": {"$ref": "#/components/schemas/BackendType"}, "type": "array"}}, "additionalProperties": false, "type": "object", "required": ["backends_names"], "title": "DeleteBackendsRequestRequest"}, "DeleteGatewaysRequestRequest": {"properties": {"names": {"items": {"type": "string"}, "type": "array", "title": "Names"}}, "additionalProperties": false, "type": "object", "required": ["names"], "title": "DeleteGatewaysRequestRequest"}, "DeletePoolRequestRequest": {"properties": {"name": {"type": "string", "title": "Name"}, "force": {"type": "boolean", "title": "Force"}}, "additionalProperties": false, "type": "object", "required": ["name", "force"], "title": "DeletePoolRequestRequest"}, "DeleteProjectsRequestRequest": {"properties": {"projects_names": {"items": {"type": "string"}, "type": "array", "title": "Projects Names"}}, "additionalProperties": false, "type": "object", "required": ["projects_names"], "title": "DeleteProjectsRequestRequest"}, "DeleteReposRequestRequest": {"properties": {"repos_ids": {"items": {"type": "string"}, "type": "array", "title": "Repos Ids"}}, "additionalProperties": false, "type": "object", "required": ["repos_ids"], "title": "DeleteReposRequestRequest"}, "DeleteRunsRequestRequest": {"properties": {"runs_names": {"items": {"type": "string"}, "type": "array", "title": "Runs Names"}}, "additionalProperties": false, "type": "object", "required": ["runs_names"], "title": "DeleteRunsRequestRequest"}, "DeleteSecretsRequestRequest": {"properties": {"repo_id": {"type": "string", "title": "Repo Id"}, "secrets_names": {"items": {"type": "string"}, "type": "array", "title": "Secrets Names"}}, "additionalProperties": false, "type": "object", "required": ["repo_id", "secrets_names"], "title": "DeleteSecretsRequestRequest"}, "DeleteUsersRequestRequest": {"properties": {"users": {"items": {"type": "string"}, "type": "array", "title": "Users"}}, "additionalProperties": false, "type": "object", "required": ["users"], "title": "DeleteUsersRequestRequest"}, "DevEnvironmentConfigurationRequest": {"properties": {"ide": {"type": "string", "enum": ["vscode"], "title": "Ide", "description": "The IDE to run"}, "version": {"type": "string", "title": "Version", "description": "The version of the IDE"}, "init": {"items": {"type": "string"}, "type": "array", "title": "Init", "description": "The bash commands to run", "default": []}, "type": {"type": "string", "enum": ["dev-environment"], "title": "Type", "default": "dev-environment"}, "image": {"type": "string", "title": "Image", "description": "The name of the Docker image to run"}, "entrypoint": {"type": "string", "title": "Entrypoint", "description": "The Docker entrypoint"}, "home_dir": {"type": "string", "title": "Home Dir", "description": "The absolute path to the home directory inside the container", "default": "/root"}, "registry_auth": {"allOf": [{"$ref": "#/components/schemas/RegistryAuthRequest"}], "title": "Registry Auth", "description": "Credentials for pulling a private Docker image"}, "python": {"allOf": [{"$ref": "#/components/schemas/PythonVersion"}], "description": "The major version of Python. Mutually exclusive with `image`"}, "env": {"anyOf": [{"items": {"type": "string", "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*(=.*$|$)"}, "type": "array"}, {"additionalProperties": {"anyOf": [{"type": "string"}, {"$ref": "#/components/schemas/EnvSentinelRequest"}]}, "type": "object"}], "title": "Env", "description": "The mapping or the list of environment variables", "default": {}}, "setup": {"items": {"type": "string"}, "type": "array", "title": "Setup", "description": "The bash commands to run on the boot", "default": []}, "resources": {"allOf": [{"$ref": "#/components/schemas/ResourcesSpecRequest"}], "title": "Resources", "description": "The resources requirements to run the configuration", "default": {"cpu": {"min": 2}, "memory": {"min": 8.0}, "disk": {"size": {"min": 100.0}}}}, "ports": {"items": {"anyOf": [{"type": "integer", "maximum": 65536.0, "exclusiveMinimum": 0.0}, {"type": "string", "pattern": "^(?:[0-9]+|\\*):[0-9]+$"}, {"$ref": "#/components/schemas/PortMappingRequest"}]}, "type": "array", "title": "Ports", "description": "Port numbers/mapping to expose", "default": []}, "backends": {"items": {"$ref": "#/components/schemas/BackendType"}, "type": "array", "description": "The backends to consider for provisioning (e.g., `[aws, gcp]`)"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions", "description": "The regions to consider for provisioning (e.g., `[eu-west-1, us-west4, westeurope]`)"}, "instance_types": {"items": {"type": "string"}, "type": "array", "title": "Instance Types", "description": "The cloud-specific instance types to consider for provisioning (e.g., `[p3.8xlarge, n1-standard-4]`)"}, "spot_policy": {"allOf": [{"$ref": "#/components/schemas/SpotPolicy"}], "description": "The policy for provisioning spot or on-demand instances: `spot`, `on-demand`, or `auto`"}, "retry": {"anyOf": [{"$ref": "#/components/schemas/ProfileRetryRequest"}, {"type": "boolean"}], "title": "Retry", "description": "The policy for resubmitting the run. Defaults to `false`"}, "retry_policy": {"allOf": [{"$ref": "#/components/schemas/ProfileRetryPolicyRequest"}], "title": "Retry Policy", "description": "The policy for resubmitting the run. Deprecated in favor of `retry`"}, "max_duration": {"anyOf": [{"type": "string", "enum": ["off"]}, {"type": "string"}, {"type": "integer"}], "title": "Max Duration", "description": "The maximum duration of a run (e.g., `2h`, `1d`, etc). After it elapses, the run is forced to stop. Defaults to `off`"}, "max_price": {"type": "number", "exclusiveMinimum": 0.0, "title": "Max Price", "description": "The maximum price per hour, in dollars"}, "pool_name": {"type": "string", "title": "Pool Name", "description": "The name of the pool. If not set, dstack will use the default name"}, "instance_name": {"type": "string", "title": "Instance Name", "description": "The name of the instance"}, "creation_policy": {"allOf": [{"$ref": "#/components/schemas/CreationPolicy"}], "description": "The policy for using instances from the pool. Defaults to `reuse-or-create`"}, "termination_policy": {"allOf": [{"$ref": "#/components/schemas/TerminationPolicy"}], "description": "The policy for termination instances. Defaults to `destroy-after-idle`"}, "termination_idle_time": {"anyOf": [{"type": "integer"}, {"type": "string"}], "title": "Termination Idle Time", "description": "Time to wait before destroying the idle instance. Defaults to `5m` for `dstack run` and to `3d` for `dstack pool add`"}}, "additionalProperties": false, "type": "object", "required": ["ide"], "title": "DevEnvironmentConfigurationRequest"}, "DiskRequest": {"properties": {"size_mib": {"type": "integer", "title": "Size Mib"}}, "additionalProperties": false, "type": "object", "required": ["size_mib"], "title": "DiskRequest"}, "DiskSpecRequest": {"properties": {"size": {"allOf": [{"$ref": "#/components/schemas/Range_Memory_"}], "title": "Size", "description": "Disk size"}}, "additionalProperties": false, "type": "object", "required": ["size"], "title": "DiskSpecRequest"}, "DstackBaseBackendConfigInfoRequest": {"properties": {"type": {"type": "string", "title": "Type"}}, "additionalProperties": false, "type": "object", "required": ["type"], "title": "DstackBaseBackendConfigInfoRequest"}, "DstackConfigInfoRequest": {"properties": {"type": {"type": "string", "enum": ["dstack"], "title": "Type", "default": "dstack"}, "base_backends": {"items": {"type": "string"}, "type": "array", "title": "Base Backends"}}, "additionalProperties": false, "type": "object", "required": ["base_backends"], "title": "DstackConfigInfoRequest", "description": "This is a config model of DstackBackend stored in BackendModel.config and used by DstackConfigurator."}, "DstackConfigValuesRequest": {"properties": {"type": {"type": "string", "enum": ["dstack"], "title": "Type", "default": "dstack"}}, "additionalProperties": false, "type": "object", "title": "DstackConfigValuesRequest"}, "EnvSentinelRequest": {"properties": {"key": {"type": "string", "title": "Key"}}, "additionalProperties": false, "type": "object", "required": ["key"], "title": "EnvSentinelRequest"}, "GCPConfigInfoRequest": {"properties": {"type": {"type": "string", "enum": ["gcp"], "title": "Type", "default": "gcp"}, "project_id": {"type": "string", "title": "Project Id"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}, "vpc_name": {"type": "string", "title": "Vpc Name"}, "vpc_project_id": {"type": "string", "title": "Vpc Project Id"}, "public_ips": {"type": "boolean", "title": "Public Ips"}}, "additionalProperties": false, "type": "object", "required": ["project_id"], "title": "GCPConfigInfoRequest"}, "GCPConfigInfoWithCredsPartialRequest": {"properties": {"type": {"type": "string", "enum": ["gcp"], "title": "Type", "default": "gcp"}, "creds": {"anyOf": [{"$ref": "#/components/schemas/GCPServiceAccountCredsRequest"}, {"$ref": "#/components/schemas/GCPDefaultCredsRequest"}], "title": "Creds"}, "project_id": {"type": "string", "title": "Project Id"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}, "vpc_name": {"type": "string", "title": "Vpc Name"}, "vpc_project_id": {"type": "string", "title": "Vpc Project Id"}, "public_ips": {"type": "boolean", "title": "Public Ips"}}, "additionalProperties": false, "type": "object", "title": "GCPConfigInfoWithCredsPartialRequest"}, "GCPConfigInfoWithCredsRequest": {"properties": {"type": {"type": "string", "enum": ["gcp"], "title": "Type", "default": "gcp"}, "project_id": {"type": "string", "title": "Project Id"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}, "vpc_name": {"type": "string", "title": "Vpc Name"}, "vpc_project_id": {"type": "string", "title": "Vpc Project Id"}, "public_ips": {"type": "boolean", "title": "Public Ips"}, "creds": {"anyOf": [{"$ref": "#/components/schemas/GCPServiceAccountCredsRequest"}, {"$ref": "#/components/schemas/GCPDefaultCredsRequest"}], "title": "Creds"}}, "additionalProperties": false, "type": "object", "required": ["project_id", "creds"], "title": "GCPConfigInfoWithCredsRequest"}, "GCPConfigValuesRequest": {"properties": {"type": {"type": "string", "enum": ["gcp"], "title": "Type", "default": "gcp"}, "default_creds": {"type": "boolean", "title": "Default Creds", "default": false}, "project_id": {"$ref": "#/components/schemas/ConfigElementRequest"}, "regions": {"$ref": "#/components/schemas/ConfigMultiElementRequest"}}, "additionalProperties": false, "type": "object", "title": "GCPConfigValuesRequest"}, "GCPDefaultCredsRequest": {"properties": {"type": {"type": "string", "enum": ["default"], "title": "Type", "default": "default"}}, "additionalProperties": false, "type": "object", "title": "GCPDefaultCredsRequest"}, "GCPServiceAccountCredsRequest": {"properties": {"type": {"type": "string", "enum": ["service_account"], "title": "Type", "default": "service_account"}, "filename": {"type": "string", "title": "Filename"}, "data": {"type": "string", "title": "Data"}}, "additionalProperties": false, "type": "object", "required": ["filename", "data"], "title": "GCPServiceAccountCredsRequest"}, "GPUSpecRequest": {"properties": {"name": {"items": {"type": "string"}, "type": "array", "title": "Name", "description": "The name of the GPU (e.g., `A100` or `H100`)"}, "count": {"allOf": [{"$ref": "#/components/schemas/Range_int_"}], "title": "Count", "description": "The number of GPUs", "default": {"min": 1, "max": 1}}, "memory": {"allOf": [{"$ref": "#/components/schemas/Range_Memory_"}], "title": "Memory", "description": "The RAM size (e.g., `16GB`). Can be set to a range (e.g. `16GB..`, or `16GB..80GB`)"}, "total_memory": {"allOf": [{"$ref": "#/components/schemas/Range_Memory_"}], "title": "Total Memory", "description": "The total RAM size (e.g., `32GB`). Can be set to a range (e.g. `16GB..`, or `16GB..80GB`)"}, "compute_capability": {"items": {}, "type": "array", "title": "Compute Capability", "description": "The minimum compute capability of the GPU (e.g., `7.5`)"}}, "additionalProperties": false, "type": "object", "title": "GPUSpecRequest"}, "GatewayConfigurationRequest": {"properties": {"type": {"type": "string", "enum": ["gateway"], "title": "Type", "default": "gateway"}, "name": {"type": "string", "title": "Name", "description": "The gateway name"}, "default": {"type": "boolean", "title": "Default", "description": "Make the gateway default", "default": false}, "backend": {"allOf": [{"$ref": "#/components/schemas/BackendType"}], "description": "The gateway backend"}, "region": {"type": "string", "title": "Region", "description": "The gateway region"}, "domain": {"type": "string", "title": "Domain", "description": "The gateway domain, e.g. `example.com`"}, "public_ip": {"type": "boolean", "title": "Public Ip", "description": "Allocate public IP for the gateway", "default": true}, "certificate": {"anyOf": [{"$ref": "#/components/schemas/LetsEncryptGatewayCertificateRequest"}, {"$ref": "#/components/schemas/ACMGatewayCertificateRequest"}], "title": "Certificate", "description": "The SSL certificate configuration. Defaults to `type: lets-encrypt`", "default": {"type": "lets-encrypt"}}}, "additionalProperties": false, "type": "object", "required": ["backend", "region"], "title": "GatewayConfigurationRequest"}, "GatewayRequest": {"properties": {"name": {"type": "string", "title": "Name"}, "configuration": {"$ref": "#/components/schemas/GatewayConfigurationRequest"}, "created_at": {"type": "string", "format": "date-time", "title": "Created At"}, "status": {"$ref": "#/components/schemas/GatewayStatus"}, "status_message": {"type": "string", "title": "Status Message"}, "hostname": {"type": "string", "title": "Hostname"}, "ip_address": {"type": "string", "title": "Ip Address"}, "instance_id": {"type": "string", "title": "Instance Id"}, "backend": {"$ref": "#/components/schemas/BackendType"}, "region": {"type": "string", "title": "Region"}, "default": {"type": "boolean", "title": "Default"}, "wildcard_domain": {"type": "string", "title": "Wildcard Domain"}}, "additionalProperties": false, "type": "object", "required": ["name", "configuration", "created_at", "status", "backend", "region", "default"], "title": "GatewayRequest"}, "GatewayStatus": {"type": "string", "enum": ["submitted", "provisioning", "running", "failed"], "title": "GatewayStatus", "description": "An enumeration."}, "GetGatewayRequestRequest": {"properties": {"name": {"type": "string", "title": "Name"}}, "additionalProperties": false, "type": "object", "required": ["name"], "title": "GetGatewayRequestRequest"}, "GetOffersRequestRequest": {"properties": {"profile": {"$ref": "#/components/schemas/ProfileRequest"}, "requirements": {"$ref": "#/components/schemas/RequirementsRequest"}}, "additionalProperties": false, "type": "object", "required": ["profile", "requirements"], "title": "GetOffersRequestRequest"}, "GetRepoRequestRequest": {"properties": {"repo_id": {"type": "string", "title": "Repo Id"}, "include_creds": {"type": "boolean", "title": "Include Creds"}}, "additionalProperties": false, "type": "object", "required": ["repo_id", "include_creds"], "title": "GetRepoRequestRequest"}, "GetRunPlanRequestRequest": {"properties": {"run_spec": {"$ref": "#/components/schemas/RunSpecRequest"}}, "additionalProperties": false, "type": "object", "required": ["run_spec"], "title": "GetRunPlanRequestRequest"}, "GetRunRequestRequest": {"properties": {"run_name": {"type": "string", "title": "Run Name"}}, "additionalProperties": false, "type": "object", "required": ["run_name"], "title": "GetRunRequestRequest"}, "GetSecretsRequestRequest": {"properties": {"repo_id": {"type": "string", "title": "Repo Id"}}, "additionalProperties": false, "type": "object", "required": ["repo_id"], "title": "GetSecretsRequestRequest"}, "GetUserRequestRequest": {"properties": {"username": {"type": "string", "title": "Username"}}, "additionalProperties": false, "type": "object", "required": ["username"], "title": "GetUserRequestRequest"}, "GlobalRole": {"type": "string", "enum": ["admin", "user"], "title": "GlobalRole", "description": "An enumeration."}, "GpuRequest": {"properties": {"name": {"type": "string", "title": "Name"}, "memory_mib": {"type": "integer", "title": "Memory Mib"}}, "additionalProperties": false, "type": "object", "required": ["name", "memory_mib"], "title": "GpuRequest"}, "HTTPValidationError": {"properties": {"detail": {"items": {"$ref": "#/components/schemas/ValidationError"}, "type": "array", "title": "Detail"}}, "type": "object", "title": "HTTPValidationError"}, "InstanceAvailability": {"enum": ["unknown", "available", "not_available", "no_quota", "idle", "busy"], "title": "InstanceAvailability", "description": "An enumeration."}, "InstanceOfferWithAvailabilityRequest": {"properties": {"backend": {"$ref": "#/components/schemas/BackendType"}, "instance": {"$ref": "#/components/schemas/InstanceTypeRequest"}, "region": {"type": "string", "title": "Region"}, "price": {"type": "number", "title": "Price"}, "availability": {"$ref": "#/components/schemas/InstanceAvailability"}, "instance_runtime": {"allOf": [{"$ref": "#/components/schemas/InstanceRuntime"}], "default": "shim"}}, "additionalProperties": false, "type": "object", "required": ["backend", "instance", "region", "price", "availability"], "title": "InstanceOfferWithAvailabilityRequest"}, "InstanceRequest": {"properties": {"id": {"type": "string", "format": "uuid", "title": "Id"}, "backend": {"$ref": "#/components/schemas/BackendType"}, "instance_type": {"$ref": "#/components/schemas/InstanceTypeRequest"}, "name": {"type": "string", "title": "Name"}, "pool_name": {"type": "string", "title": "Pool Name"}, "job_name": {"type": "string", "title": "Job Name"}, "job_status": {"$ref": "#/components/schemas/JobStatus"}, "hostname": {"type": "string", "title": "Hostname"}, "status": {"$ref": "#/components/schemas/InstanceStatus"}, "unreachable": {"type": "boolean", "title": "Unreachable", "default": false}, "created": {"type": "string", "format": "date-time", "title": "Created"}, "region": {"type": "string", "title": "Region"}, "price": {"type": "number", "title": "Price"}}, "additionalProperties": false, "type": "object", "required": ["id", "name", "status", "created"], "title": "InstanceRequest"}, "InstanceRuntime": {"enum": ["shim", "runner"], "title": "InstanceRuntime", "description": "An enumeration."}, "InstanceStatus": {"type": "string", "enum": ["pending", "provisioning", "idle", "busy", "terminating", "terminated"], "title": "InstanceStatus", "description": "An enumeration."}, "InstanceTypeRequest": {"properties": {"name": {"type": "string", "title": "Name"}, "resources": {"$ref": "#/components/schemas/ResourcesRequest"}}, "additionalProperties": false, "type": "object", "required": ["name", "resources"], "title": "InstanceTypeRequest"}, "JobPlanRequest": {"properties": {"job_spec": {"$ref": "#/components/schemas/JobSpecRequest"}, "offers": {"items": {"$ref": "#/components/schemas/InstanceOfferWithAvailabilityRequest"}, "type": "array", "title": "Offers"}, "total_offers": {"type": "integer", "title": "Total Offers"}, "max_price": {"type": "number", "title": "Max Price"}}, "additionalProperties": false, "type": "object", "required": ["job_spec", "offers", "total_offers"], "title": "JobPlanRequest"}, "JobProvisioningDataRequest": {"properties": {"backend": {"$ref": "#/components/schemas/BackendType"}, "instance_type": {"$ref": "#/components/schemas/InstanceTypeRequest"}, "instance_id": {"type": "string", "title": "Instance Id"}, "hostname": {"type": "string", "title": "Hostname"}, "internal_ip": {"type": "string", "title": "Internal Ip"}, "public_ip_enabled": {"type": "boolean", "title": "Public Ip Enabled", "default": true}, "instance_network": {"type": "string", "title": "Instance Network"}, "region": {"type": "string", "title": "Region"}, "price": {"type": "number", "title": "Price"}, "username": {"type": "string", "title": "Username"}, "ssh_port": {"type": "integer", "title": "Ssh Port"}, "dockerized": {"type": "boolean", "title": "Dockerized"}, "ssh_proxy": {"$ref": "#/components/schemas/SSHConnectionParamsRequest"}, "backend_data": {"type": "string", "title": "Backend Data"}}, "additionalProperties": false, "type": "object", "required": ["backend", "instance_type", "instance_id", "region", "price", "username", "dockerized"], "title": "JobProvisioningDataRequest"}, "JobRequest": {"properties": {"job_spec": {"$ref": "#/components/schemas/JobSpecRequest"}, "job_submissions": {"items": {"$ref": "#/components/schemas/JobSubmissionRequest"}, "type": "array", "title": "Job Submissions"}}, "additionalProperties": false, "type": "object", "required": ["job_spec", "job_submissions"], "title": "JobRequest"}, "JobSpecRequest": {"properties": {"replica_num": {"type": "integer", "title": "Replica Num", "default": 0}, "job_num": {"type": "integer", "title": "Job Num"}, "job_name": {"type": "string", "title": "Job Name"}, "jobs_per_replica": {"type": "integer", "title": "Jobs Per Replica", "default": 1}, "app_specs": {"items": {"$ref": "#/components/schemas/AppSpecRequest"}, "type": "array", "title": "App Specs"}, "commands": {"items": {"type": "string"}, "type": "array", "title": "Commands"}, "env": {"additionalProperties": {"type": "string"}, "type": "object", "title": "Env"}, "home_dir": {"type": "string", "title": "Home Dir"}, "image_name": {"type": "string", "title": "Image Name"}, "max_duration": {"type": "integer", "title": "Max Duration"}, "registry_auth": {"$ref": "#/components/schemas/RegistryAuthRequest"}, "requirements": {"$ref": "#/components/schemas/RequirementsRequest"}, "retry": {"$ref": "#/components/schemas/RetryRequest"}, "retry_policy": {"allOf": [{"$ref": "#/components/schemas/ProfileRetryPolicyRequest"}], "title": "Retry Policy", "default": {"retry": false}}, "working_dir": {"type": "string", "title": "Working Dir"}}, "additionalProperties": false, "type": "object", "required": ["job_num", "job_name", "commands", "env", "image_name", "requirements"], "title": "JobSpecRequest"}, "JobStatus": {"type": "string", "enum": ["submitted", "provisioning", "pulling", "running", "terminating", "terminated", "aborted", "failed", "done"], "title": "JobStatus", "description": "An enumeration."}, "JobSubmissionLogsRequest": {"properties": {"logs": {"items": {"$ref": "#/components/schemas/LogEventRequest"}, "type": "array", "title": "Logs"}}, "additionalProperties": false, "type": "object", "required": ["logs"], "title": "JobSubmissionLogsRequest"}, "JobSubmissionRequest": {"properties": {"id": {"type": "string", "format": "uuid4", "title": "Id"}, "submission_num": {"type": "integer", "title": "Submission Num"}, "submitted_at": {"type": "string", "format": "date-time", "title": "Submitted At"}, "last_processed_at": {"type": "string", "format": "date-time", "title": "Last Processed At"}, "finished_at": {"type": "string", "format": "date-time", "title": "Finished At"}, "status": {"$ref": "#/components/schemas/JobStatus"}, "termination_reason": {"$ref": "#/components/schemas/JobTerminationReason"}, "termination_reason_message": {"type": "string", "title": "Termination Reason Message"}, "job_provisioning_data": {"$ref": "#/components/schemas/JobProvisioningDataRequest"}}, "additionalProperties": false, "type": "object", "required": ["id", "submission_num", "submitted_at", "last_processed_at", "status"], "title": "JobSubmissionRequest"}, "JobTerminationReason": {"type": "string", "enum": ["failed_to_start_due_to_no_capacity", "interrupted_by_no_capacity", "waiting_instance_limit_exceeded", "waiting_runner_limit_exceeded", "terminated_by_user", "gateway_error", "scaled_down", "done_by_runner", "aborted_by_user", "terminated_by_server", "container_exited_with_error", "ports_binding_failed", "creating_container_error", "executor_error"], "title": "JobTerminationReason", "description": "An enumeration."}, "KubeconfigConfigRequest": {"properties": {"filename": {"type": "string", "title": "Filename"}, "data": {"type": "string", "title": "Data"}}, "additionalProperties": false, "type": "object", "required": ["filename", "data"], "title": "KubeconfigConfigRequest"}, "KubernetesConfigInfoRequest": {"properties": {"type": {"type": "string", "enum": ["kubernetes"], "title": "Type", "default": "kubernetes"}, "networking": {"$ref": "#/components/schemas/KubernetesNetworkingConfigRequest"}}, "additionalProperties": false, "type": "object", "required": ["networking"], "title": "KubernetesConfigInfoRequest"}, "KubernetesConfigInfoWithCredsPartialRequest": {"properties": {"type": {"type": "string", "enum": ["kubernetes"], "title": "Type", "default": "kubernetes"}, "networking": {"$ref": "#/components/schemas/KubernetesNetworkingConfigRequest"}, "kubeconfig": {"$ref": "#/components/schemas/KubeconfigConfigRequest"}}, "additionalProperties": false, "type": "object", "required": ["networking", "kubeconfig"], "title": "KubernetesConfigInfoWithCredsPartialRequest"}, "KubernetesConfigInfoWithCredsRequest": {"properties": {"type": {"type": "string", "enum": ["kubernetes"], "title": "Type", "default": "kubernetes"}, "networking": {"$ref": "#/components/schemas/KubernetesNetworkingConfigRequest"}, "kubeconfig": {"$ref": "#/components/schemas/KubeconfigConfigRequest"}}, "additionalProperties": false, "type": "object", "required": ["networking", "kubeconfig"], "title": "KubernetesConfigInfoWithCredsRequest"}, "KubernetesConfigValuesRequest": {"properties": {"type": {"type": "string", "enum": ["kubernetes"], "title": "Type", "default": "kubernetes"}}, "additionalProperties": false, "type": "object", "title": "KubernetesConfigValuesRequest"}, "KubernetesNetworkingConfigRequest": {"properties": {"ssh_host": {"type": "string", "title": "Ssh Host", "description": "The external IP address of any node"}, "ssh_port": {"type": "string", "title": "Ssh Port", "description": "Any port accessible outside of the cluster"}}, "additionalProperties": false, "type": "object", "title": "KubernetesNetworkingConfigRequest"}, "LambdaAPIKeyCredsRequest": {"properties": {"type": {"type": "string", "enum": ["api_key"], "title": "Type", "description": "The type of credentials", "default": "api_key"}, "api_key": {"type": "string", "title": "Api Key", "description": "The API key"}}, "additionalProperties": false, "type": "object", "required": ["api_key"], "title": "LambdaAPIKeyCredsRequest"}, "LambdaConfigInfoRequest": {"properties": {"type": {"type": "string", "enum": ["lambda"], "title": "Type", "default": "lambda"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}}, "additionalProperties": false, "type": "object", "title": "LambdaConfigInfoRequest"}, "LambdaConfigInfoWithCredsPartialRequest": {"properties": {"type": {"type": "string", "enum": ["lambda"], "title": "Type", "default": "lambda"}, "creds": {"$ref": "#/components/schemas/LambdaAPIKeyCredsRequest"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}}, "additionalProperties": false, "type": "object", "title": "LambdaConfigInfoWithCredsPartialRequest"}, "LambdaConfigInfoWithCredsRequest": {"properties": {"type": {"type": "string", "enum": ["lambda"], "title": "Type", "default": "lambda"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}, "creds": {"$ref": "#/components/schemas/LambdaAPIKeyCredsRequest"}}, "additionalProperties": false, "type": "object", "required": ["creds"], "title": "LambdaConfigInfoWithCredsRequest"}, "LambdaConfigValuesRequest": {"properties": {"type": {"type": "string", "enum": ["lambda"], "title": "Type", "default": "lambda"}, "regions": {"$ref": "#/components/schemas/ConfigMultiElementRequest"}}, "additionalProperties": false, "type": "object", "title": "LambdaConfigValuesRequest"}, "LetsEncryptGatewayCertificateRequest": {"properties": {"type": {"type": "string", "enum": ["lets-encrypt"], "title": "Type", "description": "Automatic certificates by Let's Encrypt", "default": "lets-encrypt"}}, "additionalProperties": false, "type": "object", "title": "LetsEncryptGatewayCertificateRequest"}, "ListPoolsRequestRequest": {"properties": {"project_name": {"type": "string", "title": "Project Name"}, "pool_name": {"type": "string", "title": "Pool Name"}, "only_active": {"type": "boolean", "title": "Only Active", "default": false}, "prev_created_at": {"type": "string", "format": "date-time", "title": "Prev Created At"}, "prev_id": {"type": "string", "format": "uuid", "title": "Prev Id"}, "limit": {"type": "integer", "title": "Limit", "default": 1000}, "ascending": {"type": "boolean", "title": "Ascending", "default": false}}, "additionalProperties": false, "type": "object", "title": "ListPoolsRequestRequest"}, "ListRunsRequestRequest": {"properties": {"project_name": {"type": "string", "title": "Project Name"}, "repo_id": {"type": "string", "title": "Repo Id"}, "username": {"type": "string", "title": "Username"}, "only_active": {"type": "boolean", "title": "Only Active", "default": false}, "prev_submitted_at": {"type": "string", "format": "date-time", "title": "Prev Submitted At"}, "prev_run_id": {"type": "string", "format": "uuid", "title": "Prev Run Id"}, "limit": {"type": "integer", "title": "Limit", "default": 1000}, "ascending": {"type": "boolean", "title": "Ascending", "default": false}}, "additionalProperties": false, "type": "object", "title": "ListRunsRequestRequest"}, "ListSecretsRequestRequest": {"properties": {"repo_id": {"type": "string", "title": "Repo Id"}}, "additionalProperties": false, "type": "object", "required": ["repo_id"], "title": "ListSecretsRequestRequest"}, "LocalRepoInfoRequest": {"properties": {"repo_type": {"type": "string", "enum": ["local"], "title": "Repo Type", "default": "local"}, "repo_dir": {"type": "string", "title": "Repo Dir"}}, "additionalProperties": false, "type": "object", "required": ["repo_dir"], "title": "LocalRepoInfoRequest"}, "LocalRunRepoDataRequest": {"properties": {"repo_type": {"type": "string", "enum": ["local"], "title": "Repo Type", "default": "local"}, "repo_dir": {"type": "string", "title": "Repo Dir"}}, "additionalProperties": false, "type": "object", "required": ["repo_dir"], "title": "LocalRunRepoDataRequest"}, "LogEventRequest": {"properties": {"timestamp": {"type": "string", "format": "date-time", "title": "Timestamp"}, "log_source": {"$ref": "#/components/schemas/LogEventSource"}, "message": {"type": "string", "title": "Message"}}, "additionalProperties": false, "type": "object", "required": ["timestamp", "log_source", "message"], "title": "LogEventRequest"}, "LogEventSource": {"type": "string", "enum": ["stdout", "stderr"], "title": "LogEventSource", "description": "An enumeration."}, "MemberRequest": {"properties": {"user": {"$ref": "#/components/schemas/UserRequest"}, "project_role": {"$ref": "#/components/schemas/ProjectRole"}}, "additionalProperties": false, "type": "object", "required": ["user", "project_role"], "title": "MemberRequest"}, "MemberSettingRequest": {"properties": {"username": {"type": "string", "title": "Username"}, "project_role": {"$ref": "#/components/schemas/ProjectRole"}}, "additionalProperties": false, "type": "object", "required": ["username", "project_role"], "title": "MemberSettingRequest"}, "NebiusConfigInfoRequest": {"properties": {"type": {"type": "string", "enum": ["nebius"], "title": "Type", "default": "nebius"}, "cloud_id": {"type": "string", "title": "Cloud Id"}, "folder_id": {"type": "string", "title": "Folder Id"}, "network_id": {"type": "string", "title": "Network Id"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}}, "additionalProperties": false, "type": "object", "required": ["cloud_id", "folder_id", "network_id"], "title": "NebiusConfigInfoRequest"}, "NebiusConfigInfoWithCredsPartialRequest": {"properties": {"type": {"type": "string", "enum": ["nebius"], "title": "Type", "default": "nebius"}, "creds": {"$ref": "#/components/schemas/NebiusServiceAccountCredsRequest"}, "cloud_id": {"type": "string", "title": "Cloud Id"}, "folder_id": {"type": "string", "title": "Folder Id"}, "network_id": {"type": "string", "title": "Network Id"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}}, "additionalProperties": false, "type": "object", "title": "NebiusConfigInfoWithCredsPartialRequest"}, "NebiusConfigInfoWithCredsRequest": {"properties": {"type": {"type": "string", "enum": ["nebius"], "title": "Type", "default": "nebius"}, "cloud_id": {"type": "string", "title": "Cloud Id"}, "folder_id": {"type": "string", "title": "Folder Id"}, "network_id": {"type": "string", "title": "Network Id"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}, "creds": {"$ref": "#/components/schemas/NebiusServiceAccountCredsRequest"}}, "additionalProperties": false, "type": "object", "required": ["cloud_id", "folder_id", "network_id", "creds"], "title": "NebiusConfigInfoWithCredsRequest"}, "NebiusConfigValuesRequest": {"properties": {"type": {"type": "string", "enum": ["nebius"], "title": "Type", "default": "nebius"}, "cloud_id": {"$ref": "#/components/schemas/ConfigElementRequest"}, "folder_id": {"$ref": "#/components/schemas/ConfigElementRequest"}, "network_id": {"$ref": "#/components/schemas/ConfigElementRequest"}, "regions": {"$ref": "#/components/schemas/ConfigMultiElementRequest"}}, "additionalProperties": false, "type": "object", "title": "NebiusConfigValuesRequest"}, "NebiusServiceAccountCredsRequest": {"properties": {"type": {"type": "string", "enum": ["service_account"], "title": "Type", "default": "service_account"}, "filename": {"type": "string", "title": "Filename"}, "data": {"type": "string", "title": "Data"}}, "additionalProperties": false, "type": "object", "required": ["filename", "data"], "title": "NebiusServiceAccountCredsRequest"}, "OCIClientCredsRequest": {"properties": {"type": {"type": "string", "enum": ["client"], "title": "Type", "description": "The type of credentials", "default": "client"}, "user": {"type": "string", "title": "User", "description": "User OCID"}, "tenancy": {"type": "string", "title": "Tenancy", "description": "Tenancy OCID"}, "key_file": {"type": "string", "title": "Key File", "description": "Path to the user's private PEM key. Either this or `key_content` should be set"}, "key_content": {"type": "string", "title": "Key Content", "description": "Content of the user's private PEM key. Either this or `key_file` should be set"}, "pass_phrase": {"type": "string", "title": "Pass Phrase", "description": "Passphrase for the private PEM key if it is encrypted"}, "fingerprint": {"type": "string", "title": "Fingerprint", "description": "User's public key fingerprint"}, "region": {"type": "string", "title": "Region", "description": "Name or key of any region the tenancy is subscribed to"}}, "additionalProperties": false, "type": "object", "required": ["user", "tenancy", "fingerprint", "region"], "title": "OCIClientCredsRequest"}, "OCIConfigInfoRequest": {"properties": {"type": {"type": "string", "enum": ["oci"], "title": "Type", "default": "oci"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}, "compartment_id": {"type": "string", "title": "Compartment Id"}}, "additionalProperties": false, "type": "object", "title": "OCIConfigInfoRequest"}, "OCIConfigInfoWithCredsPartialRequest": {"properties": {"type": {"type": "string", "enum": ["oci"], "title": "Type", "default": "oci"}, "creds": {"anyOf": [{"$ref": "#/components/schemas/OCIClientCredsRequest"}, {"$ref": "#/components/schemas/OCIDefaultCredsRequest"}], "title": "Creds"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}, "compartment_id": {"type": "string", "title": "Compartment Id"}}, "additionalProperties": false, "type": "object", "title": "OCIConfigInfoWithCredsPartialRequest"}, "OCIConfigInfoWithCredsRequest": {"properties": {"type": {"type": "string", "enum": ["oci"], "title": "Type", "default": "oci"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}, "compartment_id": {"type": "string", "title": "Compartment Id"}, "creds": {"anyOf": [{"$ref": "#/components/schemas/OCIClientCredsRequest"}, {"$ref": "#/components/schemas/OCIDefaultCredsRequest"}], "title": "Creds"}}, "additionalProperties": false, "type": "object", "required": ["creds"], "title": "OCIConfigInfoWithCredsRequest"}, "OCIConfigValuesRequest": {"properties": {"type": {"type": "string", "enum": ["oci"], "title": "Type", "default": "oci"}, "default_creds": {"type": "boolean", "title": "Default Creds", "default": false}, "regions": {"$ref": "#/components/schemas/ConfigMultiElementRequest"}, "compartment_id": {"type": "string", "title": "Compartment Id"}}, "additionalProperties": false, "type": "object", "title": "OCIConfigValuesRequest"}, "OCIDefaultCredsRequest": {"properties": {"type": {"type": "string", "enum": ["default"], "title": "Type", "description": "The type of credentials", "default": "default"}, "file": {"type": "string", "title": "File", "description": "Path to the OCI CLI-compatible config file", "default": "~/.oci/config"}, "profile": {"type": "string", "title": "Profile", "description": "Profile to load from the config file", "default": "DEFAULT"}}, "additionalProperties": false, "type": "object", "title": "OCIDefaultCredsRequest"}, "OpenAIChatModelRequest": {"properties": {"type": {"type": "string", "enum": ["chat"], "title": "Type", "description": "The type of the model"}, "name": {"type": "string", "title": "Name", "description": "The name of the model"}, "format": {"type": "string", "enum": ["openai"], "title": "Format"}, "prefix": {"type": "string", "title": "Prefix", "description": "The `base_url` prefix (after hostname)", "default": "/v1"}}, "additionalProperties": false, "type": "object", "required": ["type", "name", "format"], "title": "OpenAIChatModelRequest", "description": "Mapping of the model for the OpenAI-compatible endpoint.\n\nAttributes:\n    type (str): The type of the model, e.g. \"chat\"\n    name (str): The name of the model. This name will be used both to load model configuration from the HuggingFace Hub and in the OpenAI-compatible endpoint.\n    format (str): The format of the model, i.e. \"openai\".\n    prefix (str): The `base_url` prefix: `http://hostname/{prefix}/chat/completions`. Defaults to `/v1`."}, "PollLogsRequestRequest": {"properties": {"run_name": {"type": "string", "title": "Run Name"}, "job_submission_id": {"type": "string", "format": "uuid4", "title": "Job Submission Id"}, "start_time": {"type": "string", "format": "date-time", "title": "Start Time"}, "end_time": {"type": "string", "format": "date-time", "title": "End Time"}, "descending": {"type": "boolean", "title": "Descending", "default": false}, "limit": {"type": "integer", "maximum": 1000.0, "minimum": 0.0, "title": "Limit", "default": 100}, "diagnose": {"type": "boolean", "title": "Diagnose", "default": false}}, "additionalProperties": false, "type": "object", "required": ["run_name", "job_submission_id"], "title": "PollLogsRequestRequest"}, "PoolInstanceOffersRequest": {"properties": {"pool_name": {"type": "string", "title": "Pool Name"}, "instances": {"items": {"$ref": "#/components/schemas/InstanceOfferWithAvailabilityRequest"}, "type": "array", "title": "Instances"}}, "additionalProperties": false, "type": "object", "required": ["pool_name", "instances"], "title": "PoolInstanceOffersRequest"}, "PoolInstancesRequest": {"properties": {"name": {"type": "string", "title": "Name"}, "instances": {"items": {"$ref": "#/components/schemas/InstanceRequest"}, "type": "array", "title": "Instances"}}, "additionalProperties": false, "type": "object", "required": ["name", "instances"], "title": "PoolInstancesRequest"}, "PoolRequest": {"properties": {"name": {"type": "string", "title": "Name"}, "default": {"type": "boolean", "title": "Default"}, "created_at": {"type": "string", "format": "date-time", "title": "Created At"}, "total_instances": {"type": "integer", "title": "Total Instances"}, "available_instances": {"type": "integer", "title": "Available Instances"}}, "additionalProperties": false, "type": "object", "required": ["name", "default", "created_at", "total_instances", "available_instances"], "title": "PoolRequest"}, "PortMappingRequest": {"properties": {"local_port": {"type": "integer", "maximum": 65536.0, "exclusiveMinimum": 0.0, "title": "Local Port"}, "container_port": {"type": "integer", "maximum": 65536.0, "exclusiveMinimum": 0.0, "title": "Container Port"}}, "additionalProperties": false, "type": "object", "required": ["container_port"], "title": "PortMappingRequest"}, "ProfileRequest": {"properties": {"backends": {"items": {"$ref": "#/components/schemas/BackendType"}, "type": "array", "description": "The backends to consider for provisioning (e.g., `[aws, gcp]`)"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions", "description": "The regions to consider for provisioning (e.g., `[eu-west-1, us-west4, westeurope]`)"}, "instance_types": {"items": {"type": "string"}, "type": "array", "title": "Instance Types", "description": "The cloud-specific instance types to consider for provisioning (e.g., `[p3.8xlarge, n1-standard-4]`)"}, "spot_policy": {"allOf": [{"$ref": "#/components/schemas/SpotPolicy"}], "description": "The policy for provisioning spot or on-demand instances: `spot`, `on-demand`, or `auto`"}, "retry": {"anyOf": [{"$ref": "#/components/schemas/ProfileRetryRequest"}, {"type": "boolean"}], "title": "Retry", "description": "The policy for resubmitting the run. Defaults to `false`"}, "retry_policy": {"allOf": [{"$ref": "#/components/schemas/ProfileRetryPolicyRequest"}], "title": "Retry Policy", "description": "The policy for resubmitting the run. Deprecated in favor of `retry`"}, "max_duration": {"anyOf": [{"type": "string", "enum": ["off"]}, {"type": "string"}, {"type": "integer"}], "title": "Max Duration", "description": "The maximum duration of a run (e.g., `2h`, `1d`, etc). After it elapses, the run is forced to stop. Defaults to `off`"}, "max_price": {"type": "number", "exclusiveMinimum": 0.0, "title": "Max Price", "description": "The maximum price per hour, in dollars"}, "pool_name": {"type": "string", "title": "Pool Name", "description": "The name of the pool. If not set, dstack will use the default name"}, "instance_name": {"type": "string", "title": "Instance Name", "description": "The name of the instance"}, "creation_policy": {"allOf": [{"$ref": "#/components/schemas/CreationPolicy"}], "description": "The policy for using instances from the pool. Defaults to `reuse-or-create`"}, "termination_policy": {"allOf": [{"$ref": "#/components/schemas/TerminationPolicy"}], "description": "The policy for termination instances. Defaults to `destroy-after-idle`"}, "termination_idle_time": {"anyOf": [{"type": "integer"}, {"type": "string"}], "title": "Termination Idle Time", "description": "Time to wait before destroying the idle instance. Defaults to `5m` for `dstack run` and to `3d` for `dstack pool add`"}, "name": {"type": "string", "title": "Name", "description": "The name of the profile that can be passed as `--profile` to `dstack run`"}, "default": {"type": "boolean", "title": "Default", "description": "If set to true, `dstack run` will use this profile by default.", "default": false}}, "additionalProperties": false, "type": "object", "required": ["name"], "title": "ProfileRequest"}, "ProfileRetryPolicyRequest": {"properties": {"retry": {"type": "boolean", "title": "Retry", "description": "Whether to retry the run on failure or not", "default": false}, "duration": {"anyOf": [{"type": "integer"}, {"type": "string"}], "title": "Duration", "description": "The maximum period of retrying the run, e.g., `4h` or `1d`"}}, "additionalProperties": false, "type": "object", "title": "ProfileRetryPolicyRequest"}, "ProfileRetryRequest": {"properties": {"on_events": {"items": {"$ref": "#/components/schemas/RetryEvent"}, "type": "array", "description": "The list of events that should be handled with retry. Supported events are `no-capacity`, `interruption`, and `error`"}, "duration": {"anyOf": [{"type": "integer"}, {"type": "string"}], "title": "Duration", "description": "The maximum period of retrying the run, e.g., `4h` or `1d`"}}, "additionalProperties": false, "type": "object", "required": ["on_events"], "title": "ProfileRetryRequest"}, "ProjectRequest": {"properties": {"project_id": {"type": "string", "format": "uuid4", "title": "Project Id"}, "project_name": {"type": "string", "title": "Project Name"}, "owner": {"$ref": "#/components/schemas/UserRequest"}, "backends": {"items": {"$ref": "#/components/schemas/BackendInfoRequest"}, "type": "array", "title": "Backends"}, "members": {"items": {"$ref": "#/components/schemas/MemberRequest"}, "type": "array", "title": "Members"}}, "additionalProperties": false, "type": "object", "required": ["project_id", "project_name", "owner", "backends", "members"], "title": "ProjectRequest"}, "ProjectRole": {"type": "string", "enum": ["admin", "user"], "title": "ProjectRole", "description": "An enumeration."}, "PythonVersion": {"type": "string", "enum": ["3.8", "3.9", "3.10", "3.11", "3.12"], "title": "PythonVersion", "description": "An enumeration."}, "Range_Memory_": {"properties": {"min": {"type": "number", "title": "Min"}, "max": {"type": "number", "title": "Max"}}, "additionalProperties": false, "type": "object", "title": "Range[Memory]"}, "Range_int_": {"properties": {"min": {"type": "integer", "title": "Min"}, "max": {"type": "integer", "title": "Max"}}, "additionalProperties": false, "type": "object", "title": "Range[int]"}, "RefreshTokenRequestRequest": {"properties": {"username": {"type": "string", "title": "Username"}}, "additionalProperties": false, "type": "object", "required": ["username"], "title": "RefreshTokenRequestRequest"}, "RegistryAuthRequest": {"properties": {"username": {"type": "string", "title": "Username", "description": "The username"}, "password": {"type": "string", "title": "Password", "description": "The password or access token"}}, "additionalProperties": false, "type": "object", "required": ["username", "password"], "title": "RegistryAuthRequest", "description": "Credentials for pulling a private Docker image.\n\nAttributes:\n    username (str): The username\n    password (str): The password or access token"}, "RemoteRepoCredsRequest": {"properties": {"protocol": {"$ref": "#/components/schemas/RepoProtocol"}, "private_key": {"type": "string", "title": "Private Key"}, "oauth_token": {"type": "string", "title": "Oauth Token"}}, "additionalProperties": false, "type": "object", "required": ["protocol"], "title": "RemoteRepoCredsRequest"}, "RemoteRepoInfoRequest": {"properties": {"repo_type": {"type": "string", "enum": ["remote"], "title": "Repo Type", "default": "remote"}, "repo_host_name": {"type": "string", "title": "Repo Host Name"}, "repo_port": {"type": "integer", "title": "Repo Port"}, "repo_user_name": {"type": "string", "title": "Repo User Name"}, "repo_name": {"type": "string", "title": "Repo Name"}}, "additionalProperties": false, "type": "object", "required": ["repo_host_name", "repo_user_name", "repo_name"], "title": "RemoteRepoInfoRequest"}, "RemoteRunRepoDataRequest": {"properties": {"repo_type": {"type": "string", "enum": ["remote"], "title": "Repo Type", "default": "remote"}, "repo_host_name": {"type": "string", "title": "Repo Host Name"}, "repo_port": {"type": "integer", "title": "Repo Port"}, "repo_user_name": {"type": "string", "title": "Repo User Name"}, "repo_name": {"type": "string", "title": "Repo Name"}, "repo_branch": {"type": "string", "title": "Repo Branch"}, "repo_hash": {"type": "string", "title": "Repo Hash"}, "repo_diff": {"type": "string", "title": "Repo Diff"}, "repo_config_name": {"type": "string", "title": "Repo Config Name"}, "repo_config_email": {"type": "string", "title": "Repo Config Email"}}, "additionalProperties": false, "type": "object", "required": ["repo_host_name", "repo_user_name", "repo_name"], "title": "RemoteRunRepoDataRequest"}, "RemoveInstanceRequestRequest": {"properties": {"pool_name": {"type": "string", "title": "Pool Name"}, "instance_name": {"type": "string", "title": "Instance Name"}, "force": {"type": "boolean", "title": "Force", "default": false}}, "additionalProperties": false, "type": "object", "required": ["pool_name", "instance_name"], "title": "RemoveInstanceRequestRequest"}, "RepoHeadRequest": {"properties": {"repo_id": {"type": "string", "title": "Repo Id"}, "repo_info": {"oneOf": [{"$ref": "#/components/schemas/RemoteRepoInfoRequest"}, {"$ref": "#/components/schemas/LocalRepoInfoRequest"}, {"$ref": "#/components/schemas/VirtualRepoInfoRequest"}], "title": "Repo Info", "discriminator": {"propertyName": "repo_type", "mapping": {"remote": "#/components/schemas/RemoteRepoInfoRequest", "local": "#/components/schemas/LocalRepoInfoRequest", "virtual": "#/components/schemas/VirtualRepoInfoRequest"}}}}, "additionalProperties": false, "type": "object", "required": ["repo_id", "repo_info"], "title": "RepoHeadRequest"}, "RepoHeadWithCredsRequest": {"properties": {"repo_id": {"type": "string", "title": "Repo Id"}, "repo_info": {"oneOf": [{"$ref": "#/components/schemas/RemoteRepoInfoRequest"}, {"$ref": "#/components/schemas/LocalRepoInfoRequest"}, {"$ref": "#/components/schemas/VirtualRepoInfoRequest"}], "title": "Repo Info", "discriminator": {"propertyName": "repo_type", "mapping": {"remote": "#/components/schemas/RemoteRepoInfoRequest", "local": "#/components/schemas/LocalRepoInfoRequest", "virtual": "#/components/schemas/VirtualRepoInfoRequest"}}}, "repo_creds": {"$ref": "#/components/schemas/RemoteRepoCredsRequest"}}, "additionalProperties": false, "type": "object", "required": ["repo_id", "repo_info"], "title": "RepoHeadWithCredsRequest"}, "RepoProtocol": {"type": "string", "enum": ["ssh", "https"], "title": "RepoProtocol", "description": "An enumeration."}, "RequirementsRequest": {"properties": {"resources": {"$ref": "#/components/schemas/ResourcesSpecRequest"}, "max_price": {"type": "number", "title": "Max Price"}, "spot": {"type": "boolean", "title": "Spot"}}, "additionalProperties": false, "type": "object", "required": ["resources"], "title": "RequirementsRequest"}, "ResourcesRequest": {"properties": {"cpus": {"type": "integer", "title": "Cpus"}, "memory_mib": {"type": "integer", "title": "Memory Mib"}, "gpus": {"items": {"$ref": "#/components/schemas/GpuRequest"}, "type": "array", "title": "Gpus"}, "spot": {"type": "boolean", "title": "Spot"}, "disk": {"allOf": [{"$ref": "#/components/schemas/DiskRequest"}], "title": "Disk", "default": {"size_mib": 102400}}, "description": {"type": "string", "title": "Description", "default": ""}}, "additionalProperties": false, "type": "object", "required": ["cpus", "memory_mib", "gpus", "spot"], "title": "ResourcesRequest"}, "ResourcesSpecRequest": {"properties": {"cpu": {"anyOf": [{"$ref": "#/definitions/ResourcesSpecRequest/definitions/Range_Union_int__str__"}, {"type": "integer"}, {"type": "string"}], "title": "Cpu", "description": "The number of CPU cores", "default": {"min": 2}}, "memory": {"anyOf": [{"$ref": "#/definitions/ResourcesSpecRequest/definitions/Range_Union_Memory__float__int__str__"}, {"type": "number"}, {"type": "integer"}, {"type": "string"}], "title": "Memory", "description": "The RAM size (e.g., `8GB`)", "default": {"min": 8.0}}, "shm_size": {"anyOf": [{"type": "number"}, {"type": "number"}, {"type": "integer"}, {"type": "string"}], "title": "Shm Size", "description": "The size of shared memory (e.g., `8GB`). If you are using parallel communicating processes (e.g., dataloaders in PyTorch), you may need to configure this"}, "gpu": {"anyOf": [{"$ref": "#/definitions/ResourcesSpecRequest/definitions/GPUSpecRequest"}, {"$ref": "#/definitions/ResourcesSpecRequest/definitions/GPUSpecSchemaRequest"}, {"type": "integer"}, {"type": "string"}], "title": "Gpu", "description": "The GPU requirements. Can be set to a number, a string (e.g. `A100`, `80GB:2`, etc.), or an object; see [examples](#examples)"}, "disk": {"anyOf": [{"$ref": "#/definitions/ResourcesSpecRequest/definitions/DiskSpecRequest"}, {"$ref": "#/definitions/ResourcesSpecRequest/definitions/DiskSpecSchemaRequest"}, {"type": "number"}, {"type": "integer"}, {"type": "string"}], "title": "Disk", "description": "The disk resources", "default": {"size": {"min": 100.0}}}}, "additionalProperties": false, "type": "object", "title": "ResourcesSpecSchemaRequest", "definitions": {"Range_Union_int__str__": {"title": "Range[Union[int, str]]", "type": "object", "properties": {"min": {"title": "Min", "anyOf": [{"type": "integer"}, {"type": "string"}]}, "max": {"title": "Max", "anyOf": [{"type": "integer"}, {"type": "string"}]}}, "additionalProperties": false}, "Range_Union_Memory__float__int__str__": {"title": "Range[Union[Memory, float, int, str]]", "type": "object", "properties": {"min": {"title": "Min", "anyOf": [{"type": "number"}, {"type": "number"}, {"type": "integer"}, {"type": "string"}]}, "max": {"title": "Max", "anyOf": [{"type": "number"}, {"type": "number"}, {"type": "integer"}, {"type": "string"}]}}, "additionalProperties": false}, "Range_int_": {"title": "Range[int]", "type": "object", "properties": {"min": {"title": "Min", "type": "integer"}, "max": {"title": "Max", "type": "integer"}}, "additionalProperties": false}, "Range_Memory_": {"title": "Range[Memory]", "type": "object", "properties": {"min": {"title": "Min", "type": "number"}, "max": {"title": "Max", "type": "number"}}, "additionalProperties": false}, "GPUSpecRequest": {"title": "GPUSpecRequest", "type": "object", "properties": {"name": {"title": "Name", "description": "The name of the GPU (e.g., `A100` or `H100`)", "type": "array", "items": {"type": "string"}}, "count": {"title": "Count", "description": "The number of GPUs", "default": {"min": 1, "max": 1}, "allOf": [{"$ref": "#/definitions/ResourcesSpecRequest/definitions/Range_int_"}]}, "memory": {"title": "Memory", "description": "The RAM size (e.g., `16GB`). Can be set to a range (e.g. `16GB..`, or `16GB..80GB`)", "allOf": [{"$ref": "#/definitions/ResourcesSpecRequest/definitions/Range_Memory_"}]}, "total_memory": {"title": "Total Memory", "description": "The total RAM size (e.g., `32GB`). Can be set to a range (e.g. `16GB..`, or `16GB..80GB`)", "allOf": [{"$ref": "#/definitions/ResourcesSpecRequest/definitions/Range_Memory_"}]}, "compute_capability": {"title": "Compute Capability", "description": "The minimum compute capability of the GPU (e.g., `7.5`)", "type": "array", "items": {}}}, "additionalProperties": false}, "GPUSpecSchemaRequest": {"title": "GPUSpecSchemaRequest", "type": "object", "properties": {"name": {"title": "Name", "description": "The GPU name or list of names", "anyOf": [{"type": "array", "items": {"type": "string"}}, {"type": "string"}]}, "count": {"title": "Count", "description": "The number of GPUs", "default": {"min": 1, "max": 1}, "anyOf": [{"$ref": "#/definitions/ResourcesSpecRequest/definitions/Range_Union_int__str__"}, {"type": "integer"}, {"type": "string"}]}, "memory": {"title": "Memory", "description": "The RAM size (e.g., `16GB`). Can be set to a range (e.g. `16GB..`, or `16GB..80GB`)", "anyOf": [{"$ref": "#/definitions/ResourcesSpecRequest/definitions/Range_Union_Memory__float__int__str__"}, {"type": "number"}, {"type": "integer"}, {"type": "string"}]}, "total_memory": {"title": "Total Memory", "description": "The total RAM size (e.g., `32GB`). Can be set to a range (e.g. `16GB..`, or `16GB..80GB`)", "anyOf": [{"$ref": "#/definitions/ResourcesSpecRequest/definitions/Range_Union_Memory__float__int__str__"}, {"type": "number"}, {"type": "integer"}, {"type": "string"}]}, "compute_capability": {"title": "Compute Capability", "description": "The minimum compute capability of the GPU (e.g., `7.5`)", "anyOf": [{"type": "array", "items": {}}, {"type": "number"}, {"type": "string"}]}}, "additionalProperties": false}, "DiskSpecRequest": {"title": "DiskSpecRequest", "type": "object", "properties": {"size": {"title": "Size", "description": "Disk size", "allOf": [{"$ref": "#/definitions/ResourcesSpecRequest/definitions/Range_Memory_"}]}}, "required": ["size"], "additionalProperties": false}, "DiskSpecSchemaRequest": {"title": "DiskSpecSchemaRequest", "type": "object", "properties": {"size": {"title": "Size", "description": "The disk size. Can be a string (e.g., `100GB` or `100GB..`) or an object; see [examples](#examples)", "anyOf": [{"$ref": "#/definitions/ResourcesSpecRequest/definitions/Range_Union_Memory__float__int__str__"}, {"type": "number"}, {"type": "integer"}, {"type": "string"}]}}, "required": ["size"], "additionalProperties": false}}}, "RetryEvent": {"type": "string", "enum": ["no-capacity", "interruption", "error"], "title": "RetryEvent", "description": "An enumeration."}, "RetryRequest": {"properties": {"on_events": {"items": {"$ref": "#/components/schemas/RetryEvent"}, "type": "array"}, "duration": {"type": "integer", "title": "Duration"}}, "additionalProperties": false, "type": "object", "required": ["on_events", "duration"], "title": "RetryRequest"}, "RunPlanRequest": {"properties": {"project_name": {"type": "string", "title": "Project Name"}, "user": {"type": "string", "title": "User"}, "run_spec": {"$ref": "#/components/schemas/RunSpecRequest"}, "job_plans": {"items": {"$ref": "#/components/schemas/JobPlanRequest"}, "type": "array", "title": "Job Plans"}}, "additionalProperties": false, "type": "object", "required": ["project_name", "user", "run_spec", "job_plans"], "title": "RunPlanRequest"}, "RunRequest": {"properties": {"id": {"type": "string", "format": "uuid4", "title": "Id"}, "project_name": {"type": "string", "title": "Project Name"}, "user": {"type": "string", "title": "User"}, "submitted_at": {"type": "string", "format": "date-time", "title": "Submitted At"}, "last_processed_at": {"type": "string", "format": "date-time", "title": "Last Processed At"}, "status": {"$ref": "#/components/schemas/RunStatus"}, "termination_reason": {"$ref": "#/components/schemas/RunTerminationReason"}, "run_spec": {"$ref": "#/components/schemas/RunSpecRequest"}, "jobs": {"items": {"$ref": "#/components/schemas/JobRequest"}, "type": "array", "title": "Jobs"}, "latest_job_submission": {"$ref": "#/components/schemas/JobSubmissionRequest"}, "cost": {"type": "number", "title": "Cost", "default": 0}, "service": {"$ref": "#/components/schemas/ServiceSpecRequest"}}, "additionalProperties": false, "type": "object", "required": ["id", "project_name", "user", "submitted_at", "last_processed_at", "status", "run_spec", "jobs"], "title": "RunRequest"}, "RunSpecRequest": {"properties": {"run_name": {"type": "string", "title": "Run Name"}, "repo_id": {"type": "string", "title": "Repo Id"}, "repo_data": {"oneOf": [{"$ref": "#/components/schemas/RemoteRunRepoDataRequest"}, {"$ref": "#/components/schemas/LocalRunRepoDataRequest"}, {"$ref": "#/components/schemas/VirtualRunRepoDataRequest"}], "title": "Repo Data", "discriminator": {"propertyName": "repo_type", "mapping": {"remote": "#/components/schemas/RemoteRunRepoDataRequest", "local": "#/components/schemas/LocalRunRepoDataRequest", "virtual": "#/components/schemas/VirtualRunRepoDataRequest"}}}, "repo_code_hash": {"type": "string", "title": "Repo Code Hash"}, "working_dir": {"type": "string", "title": "Working Dir"}, "configuration_path": {"type": "string", "title": "Configuration Path"}, "configuration": {"oneOf": [{"$ref": "#/components/schemas/DevEnvironmentConfigurationRequest"}, {"$ref": "#/components/schemas/TaskConfigurationRequest"}, {"$ref": "#/components/schemas/ServiceConfigurationRequest"}], "title": "Configuration", "discriminator": {"propertyName": "type", "mapping": {"dev-environment": "#/components/schemas/DevEnvironmentConfigurationRequest", "task": "#/components/schemas/TaskConfigurationRequest", "service": "#/components/schemas/ServiceConfigurationRequest"}}}, "profile": {"$ref": "#/components/schemas/ProfileRequest"}, "ssh_key_pub": {"type": "string", "title": "Ssh Key Pub"}}, "additionalProperties": false, "type": "object", "required": ["repo_id", "repo_data", "working_dir", "configuration_path", "configuration", "profile", "ssh_key_pub"], "title": "RunSpecRequest"}, "RunStatus": {"type": "string", "enum": ["pending", "submitted", "provisioning", "running", "terminating", "terminated", "failed", "done"], "title": "RunStatus", "description": "An enumeration."}, "RunTerminationReason": {"type": "string", "enum": ["all_jobs_done", "job_failed", "retry_limit_exceeded", "stopped_by_user", "aborted_by_user", "server_error"], "title": "RunTerminationReason", "description": "An enumeration."}, "RunpodAPIKeyCredsRequest": {"properties": {"type": {"type": "string", "enum": ["api_key"], "title": "Type", "default": "api_key"}, "api_key": {"type": "string", "title": "Api Key"}}, "additionalProperties": false, "type": "object", "required": ["api_key"], "title": "RunpodAPIKeyCredsRequest"}, "RunpodConfigInfoRequest": {"properties": {"type": {"type": "string", "enum": ["runpod"], "title": "Type", "default": "runpod"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}}, "additionalProperties": false, "type": "object", "title": "RunpodConfigInfoRequest"}, "RunpodConfigInfoWithCredsPartialRequest": {"properties": {"type": {"type": "string", "enum": ["runpod"], "title": "Type", "default": "runpod"}, "creds": {"$ref": "#/components/schemas/RunpodAPIKeyCredsRequest"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}}, "additionalProperties": false, "type": "object", "title": "RunpodConfigInfoWithCredsPartialRequest"}, "RunpodConfigInfoWithCredsRequest": {"properties": {"type": {"type": "string", "enum": ["runpod"], "title": "Type", "default": "runpod"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}, "creds": {"$ref": "#/components/schemas/RunpodAPIKeyCredsRequest"}}, "additionalProperties": false, "type": "object", "required": ["creds"], "title": "RunpodConfigInfoWithCredsRequest"}, "RunpodConfigValuesRequest": {"properties": {"type": {"type": "string", "enum": ["runpod"], "title": "Type", "default": "runpod"}, "regions": {"$ref": "#/components/schemas/ConfigMultiElementRequest"}}, "additionalProperties": false, "type": "object", "title": "RunpodConfigValuesRequest"}, "SSHConnectionParamsRequest": {"properties": {"hostname": {"type": "string", "title": "Hostname"}, "username": {"type": "string", "title": "Username"}, "port": {"type": "integer", "title": "Port"}}, "additionalProperties": false, "type": "object", "required": ["hostname", "username", "port"], "title": "SSHConnectionParamsRequest"}, "SSHKeyRequest": {"properties": {"public": {"type": "string", "title": "Public"}, "private": {"type": "string", "title": "Private"}}, "additionalProperties": false, "type": "object", "required": ["public"], "title": "SSHKeyRequest"}, "SaveRepoCredsRequestRequest": {"properties": {"repo_id": {"type": "string", "title": "Repo Id"}, "repo_info": {"anyOf": [{"$ref": "#/components/schemas/RemoteRepoInfoRequest"}, {"$ref": "#/components/schemas/LocalRepoInfoRequest"}, {"$ref": "#/components/schemas/VirtualRepoInfoRequest"}], "title": "Repo Info"}, "repo_creds": {"$ref": "#/components/schemas/RemoteRepoCredsRequest"}}, "additionalProperties": false, "type": "object", "required": ["repo_id", "repo_info"], "title": "SaveRepoCredsRequestRequest"}, "ScalingSpecRequest": {"properties": {"metric": {"type": "string", "enum": ["rps"], "title": "Metric", "description": "The target metric to track. Currently, the only supported value is `rps` (meaning requests per second)"}, "target": {"type": "number", "title": "Target", "description": "The target value of the metric. The number of replicas is calculated based on this number and automatically adjusts (scales up or down) as this metric changes"}, "scale_up_delay": {"type": "integer", "title": "Scale Up Delay", "description": "The delay in seconds before scaling up", "default": 300}, "scale_down_delay": {"type": "integer", "title": "Scale Down Delay", "description": "The delay in seconds before scaling down", "default": 600}}, "additionalProperties": false, "type": "object", "required": ["metric", "target"], "title": "ScalingSpecRequest"}, "SecretRequest": {"properties": {"name": {"type": "string", "title": "Name"}, "value": {"type": "string", "title": "Value"}}, "additionalProperties": false, "type": "object", "required": ["name", "value"], "title": "SecretRequest"}, "ServiceConfigurationRequest": {"properties": {"port": {"anyOf": [{"type": "integer", "maximum": 65536.0, "exclusiveMinimum": 0.0}, {"type": "string", "pattern": "^[0-9]+:[0-9]+$"}, {"$ref": "#/components/schemas/PortMappingRequest"}], "title": "Port", "description": "The port, that application listens on or the mapping"}, "model": {"anyOf": [{"$ref": "#/components/schemas/TGIChatModelRequest"}, {"$ref": "#/components/schemas/OpenAIChatModelRequest"}], "title": "Model", "description": "Mapping of the model for the OpenAI-compatible endpoint"}, "https": {"type": "boolean", "title": "Https", "description": "Enable HTTPS", "default": true}, "auth": {"type": "boolean", "title": "Auth", "description": "Enable the authorization", "default": true}, "replicas": {"anyOf": [{"type": "integer", "minimum": 1.0}, {"type": "string", "pattern": "^[0-9]+..[1-9][0-9]*$"}, {"$ref": "#/components/schemas/Range_int_"}], "title": "Replicas", "description": "The number of replicas. Can be a number (e.g. `2`) or a range (`0..4` or `1..8`). If it's a range, the `scaling` property is required", "default": {"min": 1, "max": 1}}, "scaling": {"allOf": [{"$ref": "#/components/schemas/ScalingSpecRequest"}], "title": "Scaling", "description": "The auto-scaling rules. Required if `replicas` is set to a range"}, "type": {"type": "string", "enum": ["service"], "title": "Type", "default": "service"}, "image": {"type": "string", "title": "Image", "description": "The name of the Docker image to run"}, "entrypoint": {"type": "string", "title": "Entrypoint", "description": "The Docker entrypoint"}, "home_dir": {"type": "string", "title": "Home Dir", "description": "The absolute path to the home directory inside the container", "default": "/root"}, "registry_auth": {"allOf": [{"$ref": "#/components/schemas/RegistryAuthRequest"}], "title": "Registry Auth", "description": "Credentials for pulling a private Docker image"}, "python": {"allOf": [{"$ref": "#/components/schemas/PythonVersion"}], "description": "The major version of Python. Mutually exclusive with `image`"}, "env": {"anyOf": [{"items": {"type": "string", "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*(=.*$|$)"}, "type": "array"}, {"additionalProperties": {"anyOf": [{"type": "string"}, {"$ref": "#/components/schemas/EnvSentinelRequest"}]}, "type": "object"}], "title": "Env", "description": "The mapping or the list of environment variables", "default": {}}, "setup": {"items": {"type": "string"}, "type": "array", "title": "Setup", "description": "The bash commands to run on the boot", "default": []}, "resources": {"allOf": [{"$ref": "#/components/schemas/ResourcesSpecRequest"}], "title": "Resources", "description": "The resources requirements to run the configuration", "default": {"cpu": {"min": 2}, "memory": {"min": 8.0}, "disk": {"size": {"min": 100.0}}}}, "commands": {"items": {"type": "string"}, "type": "array", "title": "Commands", "description": "The bash commands to run", "default": []}, "backends": {"items": {"$ref": "#/components/schemas/BackendType"}, "type": "array", "description": "The backends to consider for provisioning (e.g., `[aws, gcp]`)"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions", "description": "The regions to consider for provisioning (e.g., `[eu-west-1, us-west4, westeurope]`)"}, "instance_types": {"items": {"type": "string"}, "type": "array", "title": "Instance Types", "description": "The cloud-specific instance types to consider for provisioning (e.g., `[p3.8xlarge, n1-standard-4]`)"}, "spot_policy": {"allOf": [{"$ref": "#/components/schemas/SpotPolicy"}], "description": "The policy for provisioning spot or on-demand instances: `spot`, `on-demand`, or `auto`"}, "retry": {"anyOf": [{"$ref": "#/components/schemas/ProfileRetryRequest"}, {"type": "boolean"}], "title": "Retry", "description": "The policy for resubmitting the run. Defaults to `false`"}, "retry_policy": {"allOf": [{"$ref": "#/components/schemas/ProfileRetryPolicyRequest"}], "title": "Retry Policy", "description": "The policy for resubmitting the run. Deprecated in favor of `retry`"}, "max_duration": {"anyOf": [{"type": "string", "enum": ["off"]}, {"type": "string"}, {"type": "integer"}], "title": "Max Duration", "description": "The maximum duration of a run (e.g., `2h`, `1d`, etc). After it elapses, the run is forced to stop. Defaults to `off`"}, "max_price": {"type": "number", "exclusiveMinimum": 0.0, "title": "Max Price", "description": "The maximum price per hour, in dollars"}, "pool_name": {"type": "string", "title": "Pool Name", "description": "The name of the pool. If not set, dstack will use the default name"}, "instance_name": {"type": "string", "title": "Instance Name", "description": "The name of the instance"}, "creation_policy": {"allOf": [{"$ref": "#/components/schemas/CreationPolicy"}], "description": "The policy for using instances from the pool. Defaults to `reuse-or-create`"}, "termination_policy": {"allOf": [{"$ref": "#/components/schemas/TerminationPolicy"}], "description": "The policy for termination instances. Defaults to `destroy-after-idle`"}, "termination_idle_time": {"anyOf": [{"type": "integer"}, {"type": "string"}], "title": "Termination Idle Time", "description": "Time to wait before destroying the idle instance. Defaults to `5m` for `dstack run` and to `3d` for `dstack pool add`"}}, "additionalProperties": false, "type": "object", "required": ["port"], "title": "ServiceConfigurationRequest"}, "ServiceModelSpecRequest": {"properties": {"name": {"type": "string", "title": "Name"}, "base_url": {"type": "string", "title": "Base Url"}, "type": {"type": "string", "title": "Type"}}, "additionalProperties": false, "type": "object", "required": ["name", "base_url", "type"], "title": "ServiceModelSpecRequest"}, "ServiceSpecRequest": {"properties": {"url": {"type": "string", "title": "Url"}, "model": {"$ref": "#/components/schemas/ServiceModelSpecRequest"}, "options": {"type": "object", "title": "Options", "default": {}}}, "additionalProperties": false, "type": "object", "required": ["url"], "title": "ServiceSpecRequest"}, "SetDefaultGatewayRequestRequest": {"properties": {"name": {"type": "string", "title": "Name"}}, "additionalProperties": false, "type": "object", "required": ["name"], "title": "SetDefaultGatewayRequestRequest"}, "SetDefaultPoolRequestRequest": {"properties": {"pool_name": {"type": "string", "title": "Pool Name"}}, "additionalProperties": false, "type": "object", "required": ["pool_name"], "title": "SetDefaultPoolRequestRequest"}, "SetProjectMembersRequestRequest": {"properties": {"members": {"items": {"$ref": "#/components/schemas/MemberSettingRequest"}, "type": "array", "title": "Members"}}, "additionalProperties": false, "type": "object", "required": ["members"], "title": "SetProjectMembersRequestRequest"}, "SetWildcardDomainRequestRequest": {"properties": {"name": {"type": "string", "title": "Name"}, "wildcard_domain": {"type": "string", "title": "Wildcard Domain"}}, "additionalProperties": false, "type": "object", "required": ["name", "wildcard_domain"], "title": "SetWildcardDomainRequestRequest"}, "ShowPoolRequestRequest": {"properties": {"name": {"type": "string", "title": "Name"}}, "additionalProperties": false, "type": "object", "title": "ShowPoolRequestRequest"}, "SpotPolicy": {"type": "string", "enum": ["spot", "on-demand", "auto"], "title": "SpotPolicy", "description": "An enumeration."}, "StopRunsRequestRequest": {"properties": {"runs_names": {"items": {"type": "string"}, "type": "array", "title": "Runs Names"}, "abort": {"type": "boolean", "title": "Abort"}}, "additionalProperties": false, "type": "object", "required": ["runs_names", "abort"], "title": "StopRunsRequestRequest"}, "SubmitRunRequestRequest": {"properties": {"run_spec": {"$ref": "#/components/schemas/RunSpecRequest"}}, "additionalProperties": false, "type": "object", "required": ["run_spec"], "title": "SubmitRunRequestRequest"}, "TGIChatModelRequest": {"properties": {"type": {"type": "string", "enum": ["chat"], "title": "Type", "description": "The type of the model"}, "name": {"type": "string", "title": "Name", "description": "The name of the model"}, "format": {"type": "string", "enum": ["tgi"], "title": "Format"}, "chat_template": {"type": "string", "title": "Chat Template"}, "eos_token": {"type": "string", "title": "Eos Token"}}, "additionalProperties": false, "type": "object", "required": ["type", "name", "format"], "title": "TGIChatModelRequest", "description": "Mapping of the model for the OpenAI-compatible endpoint.\n\nAttributes:\n    type (str): The type of the model, e.g. \"chat\"\n    name (str): The name of the model. This name will be used both to load model configuration from the HuggingFace Hub and in the OpenAI-compatible endpoint.\n    format (str): The format of the model, e.g. \"tgi\" if the model is served with HuggingFace's Text Generation Inference.\n    chat_template (Optional[str]): The custom prompt template for the model. If not specified, the default prompt template the HuggingFace Hub configuration will be used.\n    eos_token (Optional[str]): The custom end of sentence token. If not specified, the default custom end of sentence token from the HuggingFace Hub configuration will be used."}, "TaskConfigurationRequest": {"properties": {"nodes": {"type": "integer", "minimum": 1.0, "title": "Nodes", "description": "Number of nodes", "default": 1}, "type": {"type": "string", "enum": ["task"], "title": "Type", "default": "task"}, "image": {"type": "string", "title": "Image", "description": "The name of the Docker image to run"}, "entrypoint": {"type": "string", "title": "Entrypoint", "description": "The Docker entrypoint"}, "home_dir": {"type": "string", "title": "Home Dir", "description": "The absolute path to the home directory inside the container", "default": "/root"}, "registry_auth": {"allOf": [{"$ref": "#/components/schemas/RegistryAuthRequest"}], "title": "Registry Auth", "description": "Credentials for pulling a private Docker image"}, "python": {"allOf": [{"$ref": "#/components/schemas/PythonVersion"}], "description": "The major version of Python. Mutually exclusive with `image`"}, "env": {"anyOf": [{"items": {"type": "string", "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*(=.*$|$)"}, "type": "array"}, {"additionalProperties": {"anyOf": [{"type": "string"}, {"$ref": "#/components/schemas/EnvSentinelRequest"}]}, "type": "object"}], "title": "Env", "description": "The mapping or the list of environment variables", "default": {}}, "setup": {"items": {"type": "string"}, "type": "array", "title": "Setup", "description": "The bash commands to run on the boot", "default": []}, "resources": {"allOf": [{"$ref": "#/components/schemas/ResourcesSpecRequest"}], "title": "Resources", "description": "The resources requirements to run the configuration", "default": {"cpu": {"min": 2}, "memory": {"min": 8.0}, "disk": {"size": {"min": 100.0}}}}, "ports": {"items": {"anyOf": [{"type": "integer", "maximum": 65536.0, "exclusiveMinimum": 0.0}, {"type": "string", "pattern": "^(?:[0-9]+|\\*):[0-9]+$"}, {"$ref": "#/components/schemas/PortMappingRequest"}]}, "type": "array", "title": "Ports", "description": "Port numbers/mapping to expose", "default": []}, "commands": {"items": {"type": "string"}, "type": "array", "title": "Commands", "description": "The bash commands to run", "default": []}, "backends": {"items": {"$ref": "#/components/schemas/BackendType"}, "type": "array", "description": "The backends to consider for provisioning (e.g., `[aws, gcp]`)"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions", "description": "The regions to consider for provisioning (e.g., `[eu-west-1, us-west4, westeurope]`)"}, "instance_types": {"items": {"type": "string"}, "type": "array", "title": "Instance Types", "description": "The cloud-specific instance types to consider for provisioning (e.g., `[p3.8xlarge, n1-standard-4]`)"}, "spot_policy": {"allOf": [{"$ref": "#/components/schemas/SpotPolicy"}], "description": "The policy for provisioning spot or on-demand instances: `spot`, `on-demand`, or `auto`"}, "retry": {"anyOf": [{"$ref": "#/components/schemas/ProfileRetryRequest"}, {"type": "boolean"}], "title": "Retry", "description": "The policy for resubmitting the run. Defaults to `false`"}, "retry_policy": {"allOf": [{"$ref": "#/components/schemas/ProfileRetryPolicyRequest"}], "title": "Retry Policy", "description": "The policy for resubmitting the run. Deprecated in favor of `retry`"}, "max_duration": {"anyOf": [{"type": "string", "enum": ["off"]}, {"type": "string"}, {"type": "integer"}], "title": "Max Duration", "description": "The maximum duration of a run (e.g., `2h`, `1d`, etc). After it elapses, the run is forced to stop. Defaults to `off`"}, "max_price": {"type": "number", "exclusiveMinimum": 0.0, "title": "Max Price", "description": "The maximum price per hour, in dollars"}, "pool_name": {"type": "string", "title": "Pool Name", "description": "The name of the pool. If not set, dstack will use the default name"}, "instance_name": {"type": "string", "title": "Instance Name", "description": "The name of the instance"}, "creation_policy": {"allOf": [{"$ref": "#/components/schemas/CreationPolicy"}], "description": "The policy for using instances from the pool. Defaults to `reuse-or-create`"}, "termination_policy": {"allOf": [{"$ref": "#/components/schemas/TerminationPolicy"}], "description": "The policy for termination instances. Defaults to `destroy-after-idle`"}, "termination_idle_time": {"anyOf": [{"type": "integer"}, {"type": "string"}], "title": "Termination Idle Time", "description": "Time to wait before destroying the idle instance. Defaults to `5m` for `dstack run` and to `3d` for `dstack pool add`"}}, "additionalProperties": false, "type": "object", "title": "TaskConfigurationRequest"}, "TensorDockAPIKeyCredsRequest": {"properties": {"type": {"type": "string", "enum": ["api_key"], "title": "Type", "description": "The type of credentials", "default": "api_key"}, "api_key": {"type": "string", "title": "Api Key", "description": "The API key"}, "api_token": {"type": "string", "title": "Api Token", "description": "The API token"}}, "additionalProperties": false, "type": "object", "required": ["api_key", "api_token"], "title": "TensorDockAPIKeyCredsRequest"}, "TensorDockConfigInfoRequest": {"properties": {"type": {"type": "string", "enum": ["tensordock"], "title": "Type", "default": "tensordock"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}}, "additionalProperties": false, "type": "object", "title": "TensorDockConfigInfoRequest"}, "TensorDockConfigInfoWithCredsPartialRequest": {"properties": {"type": {"type": "string", "enum": ["tensordock"], "title": "Type", "default": "tensordock"}, "creds": {"$ref": "#/components/schemas/TensorDockAPIKeyCredsRequest"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}}, "additionalProperties": false, "type": "object", "title": "TensorDockConfigInfoWithCredsPartialRequest"}, "TensorDockConfigInfoWithCredsRequest": {"properties": {"type": {"type": "string", "enum": ["tensordock"], "title": "Type", "default": "tensordock"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}, "creds": {"$ref": "#/components/schemas/TensorDockAPIKeyCredsRequest"}}, "additionalProperties": false, "type": "object", "required": ["creds"], "title": "TensorDockConfigInfoWithCredsRequest"}, "TensorDockConfigValuesRequest": {"properties": {"type": {"type": "string", "enum": ["tensordock"], "title": "Type", "default": "tensordock"}, "regions": {"$ref": "#/components/schemas/ConfigMultiElementRequest"}}, "additionalProperties": false, "type": "object", "title": "TensorDockConfigValuesRequest"}, "TerminationPolicy": {"type": "string", "enum": ["dont-destroy", "destroy-after-idle"], "title": "TerminationPolicy", "description": "An enumeration."}, "UpdateBackendYAMLRequestRequest": {"properties": {"config_yaml": {"type": "string", "title": "Config Yaml"}}, "additionalProperties": false, "type": "object", "required": ["config_yaml"], "title": "UpdateBackendYAMLRequestRequest"}, "UserRequest": {"properties": {"id": {"type": "string", "format": "uuid4", "title": "Id"}, "username": {"type": "string", "title": "Username"}, "global_role": {"$ref": "#/components/schemas/GlobalRole"}, "email": {"type": "string", "title": "Email"}}, "additionalProperties": false, "type": "object", "required": ["id", "username", "global_role"], "title": "UserRequest"}, "UserTokenCredsRequest": {"properties": {"token": {"type": "string", "title": "Token"}}, "additionalProperties": false, "type": "object", "required": ["token"], "title": "UserTokenCredsRequest"}, "UserWithCredsRequest": {"properties": {"id": {"type": "string", "format": "uuid4", "title": "Id"}, "username": {"type": "string", "title": "Username"}, "global_role": {"$ref": "#/components/schemas/GlobalRole"}, "email": {"type": "string", "title": "Email"}, "creds": {"$ref": "#/components/schemas/UserTokenCredsRequest"}}, "additionalProperties": false, "type": "object", "required": ["id", "username", "global_role", "creds"], "title": "UserWithCredsRequest"}, "ValidationError": {"properties": {"loc": {"items": {"anyOf": [{"type": "string"}, {"type": "integer"}]}, "type": "array", "title": "Location"}, "msg": {"type": "string", "title": "Message"}, "type": {"type": "string", "title": "Error Type"}}, "type": "object", "required": ["loc", "msg", "type"], "title": "ValidationError"}, "VastAIAPIKeyCredsRequest": {"properties": {"type": {"type": "string", "enum": ["api_key"], "title": "Type", "description": "The type of credentials", "default": "api_key"}, "api_key": {"type": "string", "title": "Api Key", "description": "The API key"}}, "additionalProperties": false, "type": "object", "required": ["api_key"], "title": "VastAIAPIKeyCredsRequest"}, "VastAIConfigInfoRequest": {"properties": {"type": {"type": "string", "enum": ["vastai"], "title": "Type", "default": "vastai"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}}, "additionalProperties": false, "type": "object", "title": "VastAIConfigInfoRequest"}, "VastAIConfigInfoWithCredsPartialRequest": {"properties": {"type": {"type": "string", "enum": ["vastai"], "title": "Type", "default": "vastai"}, "creds": {"$ref": "#/components/schemas/VastAIAPIKeyCredsRequest"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}}, "additionalProperties": false, "type": "object", "title": "VastAIConfigInfoWithCredsPartialRequest"}, "VastAIConfigInfoWithCredsRequest": {"properties": {"type": {"type": "string", "enum": ["vastai"], "title": "Type", "default": "vastai"}, "regions": {"items": {"type": "string"}, "type": "array", "title": "Regions"}, "creds": {"$ref": "#/components/schemas/VastAIAPIKeyCredsRequest"}}, "additionalProperties": false, "type": "object", "required": ["creds"], "title": "VastAIConfigInfoWithCredsRequest"}, "VastAIConfigValuesRequest": {"properties": {"type": {"type": "string", "enum": ["vastai"], "title": "Type", "default": "vastai"}, "regions": {"$ref": "#/components/schemas/ConfigMultiElementRequest"}}, "additionalProperties": false, "type": "object", "title": "VastAIConfigValuesRequest"}, "VirtualRepoInfoRequest": {"properties": {"repo_type": {"type": "string", "enum": ["virtual"], "title": "Repo Type", "default": "virtual"}}, "additionalProperties": false, "type": "object", "title": "VirtualRepoInfoRequest"}, "VirtualRunRepoDataRequest": {"properties": {"repo_type": {"type": "string", "enum": ["virtual"], "title": "Repo Type", "default": "virtual"}}, "additionalProperties": false, "type": "object", "title": "VirtualRunRepoDataRequest"}}, "securitySchemes": {"HTTPBearer": {"type": "http", "scheme": "bearer"}}}}